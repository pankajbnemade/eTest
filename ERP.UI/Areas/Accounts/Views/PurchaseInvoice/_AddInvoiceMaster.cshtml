@model PurchaseInvoiceModel

<div class="modal-dialog modal-lg">
    <div class="modal-content">
        <div class="modal-header">
            @if (Model.PurchaseInvoiceId > 0)
            {
<h5 class="modal-title">Edit Invoice</h5> }
else
{
<h5 class="modal-title">Add Invoice</h5>}
            <button type="button" class="close btn-default" data-dismiss="modal" aria-label="Close">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <form id="frmInvoiceMaster" class="width100" method="post"
              asp-action="SaveInvoiceMaster" asp-controller="PurchaseInvoice" asp-area="Accounts"
              data-ajax-begin="return BeginInvoiceMaster();" data-ajax-success="SuccessInvoiceMaster"
              data-ajax="true" data-ajax-method="post">
            <div class="modal-body">
                @Html.HiddenFor(model => model.PurchaseInvoiceId)
                @Html.HiddenFor(model => model.CompanyId)
                @Html.HiddenFor(model => model.FinancialYearId)
                @Html.HiddenFor(model => model.InvoiceNo)
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.InvoiceNo, new { @class = "required" })
                            @Html.TextBoxFor(model => model.InvoiceNo, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.InvoiceNo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.InvoiceDate, new { @class = "required" })
                            @Html.TextBoxFor(model => model.InvoiceDate, "{0:dd/MMM/yyyy}", new { @class = "form-control form-control-sm", autocomplete = "off", @placeholder = "DD/MMM/YYYY" })
                            @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SupplierLedgerId, new { @class = "required" })
                            @Html.DropDownListFor(model => model.SupplierLedgerId, new SelectList(ViewBag.SupplierList, "Value", "DisplayText"), "Select", new { @class = "form-control form-control-sm" })
                            @Html.ValidationMessageFor(model => model.SupplierLedgerId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SupplierReferenceNo, new { @class = "required" })
                            @Html.TextBoxFor(model => model.SupplierReferenceNo, new { @class = "form-control form-control-sm" })
                            @Html.ValidationMessageFor(model => model.SupplierReferenceNo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.BillToAddressId, new { @class = "required" })
                            <select class="form-control form-control-sm" asp-for="BillToAddressId">
                                <option value="">Select</option>
                            </select>
                            @Html.ValidationMessageFor(model => model.BillToAddressId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SupplierReferenceDate, new { @class = "required" })
                            @Html.TextBoxFor(model => model.SupplierReferenceDate, "{0:dd/MMM/yyyy}", new { @class = "form-control form-control-sm", autocomplete = "off", @placeholder = "DD/MMM/YYYY" })
                            @Html.ValidationMessageFor(model => model.SupplierReferenceDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.AccountLedgerId, new { @class = "required" })
                            @Html.DropDownListFor(model => model.AccountLedgerId, new SelectList(ViewBag.AccountLedgerList, "Value", "DisplayText"), "Select", new { @class = "form-control form-control-sm" })
                            @Html.ValidationMessageFor(model => model.AccountLedgerId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PaymentTerm)
                            @Html.TextBoxFor(model => model.PaymentTerm, new { @class = "form-control form-control-sm" })
                            @Html.ValidationMessageFor(model => model.PaymentTerm, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CreditLimitDays)
                            @Html.TextBoxFor(model => model.CreditLimitDays, new { @class = "form-control form-control-sm" })
                            @Html.ValidationMessageFor(model => model.CreditLimitDays, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CurrencyId, new { @class = "required" })
                            @Html.DropDownListFor(model => model.CurrencyId, new SelectList(ViewBag.CurrencyList, "Value", "DisplayText"), "Select", new { @class = "form-control form-control-sm" })
                            @Html.ValidationMessageFor(model => model.CurrencyId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ExchangeRate, new { @class = "required" })
                            @Html.TextBoxFor(model => model.ExchangeRate, new { @class = "form-control form-control-sm" })
                            @Html.ValidationMessageFor(model => model.ExchangeRate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.TaxModelType, new { @class = "required" })
                            @Html.DropDownListFor(model => model.TaxModelType, new SelectList(ViewBag.TaxModelTypeList, "Name", "Description"), "Select", new { @class = "form-control form-control-sm" })
                            @Html.ValidationMessageFor(model => model.TaxModelType, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.TaxRegisterId)
                            @Html.DropDownListFor(model => model.TaxRegisterId, new SelectList(ViewBag.TaxRegisterList, "Value", "DisplayText"), "Select", new { @class = "form-control form-control-sm" })
                            @Html.ValidationMessageFor(model => model.TaxRegisterId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DiscountPercentageOrAmount)
                            @Html.DropDownListFor(model => model.DiscountPercentageOrAmount, new SelectList(ViewBag.DiscountTypeList, "Name", "Description"), "Select", new { @class = "form-control form-control-sm" })
                            @Html.ValidationMessageFor(model => model.DiscountPercentageOrAmount, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DiscountPerOrAmountFc)
                            @Html.TextBoxFor(model => model.DiscountPerOrAmountFc, new { @class = "form-control form-control-sm" })
                            @Html.ValidationMessageFor(model => model.DiscountPerOrAmountFc, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark)
                            @Html.TextAreaFor(model => model.Remark, new { @class = "form-control form-control-sm col-sm-12" })
                            @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" title="Back"><i class="fas fa-arrow-left"></i> Back</button>
                <button type="submit" class="btn btn-primary" title="Save"><i class="fas fa-save"></i> Save</button>
            </div>
        </form>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $('#InvoiceDate').datetimepicker({
            format: 'DD/MMM/YYYY',
            useCurrent: false,
            defaultDate: false, // setValue:''
            widgetPositioning: {
                horizontal: 'left',
                vertical: 'bottom'
            }
        });

        $('#SupplierReferenceDate').datetimepicker({
            format: 'DD/MMM/YYYY',
            useCurrent: false,
            defaultDate: false, // setValue:''
            widgetPositioning: {
                horizontal: 'left',
                vertical: 'bottom'
            }
        });

        //$('.decimal-two-scale').autoNumeric('init', { vMin: '-999999999999999.999', vMax: '999999999999999.999' });

        if ('@Model.PurchaseInvoiceId' > 0 && '@Model.SupplierLedgerId' > 0) {
            GetBillToAddressByLedgerId('@Model.SupplierLedgerId');
        }
    });

    // customer change.
    $(document).off('change').on('change', '#SupplierLedgerId', function () {
        GetBillToAddressByLedgerId(this.value);
    });

    // get bill to address by ledgerId.
    function GetBillToAddressByLedgerId(ledgerId) {
        if ('' != ledgerId) {
            var model = { ledgerId: ledgerId };
            AjaxCommunication.CreateRequest(this.window, 'Post', '@Url.Action("GetBillToAddressByLedgerId", "PurchaseInvoice")', '', model,
                function (response) {
                    $('#BillToAddressId').empty();
                    $('#BillToAddressId').append("<option value=''>Select</option>");

                    if (true == response.Result.Status) {
                        $.each(response.Result.Data, function (i, item) {
                            $('#BillToAddressId').append("<option value='" + item.Value + "'>" + item.DisplayText + "</option>");
                        });
                        if ('@Model.SupplierLedgerId' > 0) {
                            $('#BillToAddressId').val('@Model.BillToAddressId');
                        }
                    }
                    else {
                        if ('NoItems' == response.Result.Message) {
                            $("span[data-valmsg-for='BillToAddressId']").removeClass('field-validation-valid').addClass('field-validation-error');
                            $("span[data-valmsg-for='BillToAddressId']").html('<span for="BillToAddressId" class="">No data found.</span>');
                        }
                    }
                }, 
                function (XMLHttpRequest, textStatus, errorThrown) {
            errorCallback(XMLHttpRequest, textStatus, errorThrown);
        }, true, null, false);
        }
        else {
            $('#BillToAddressId').empty();
            $('#BillToAddressId').append("<option value=''>Select</option>");
        }
    }

    // currency change.
    $(document).on('change', '#CurrencyId', function () {
        GetExchangeRateByCurrencyId(this.value);
    });

    // get exchange rate by currencyId.
    function GetExchangeRateByCurrencyId(currencyId) {
        if ('' != currencyId) {
            var model = { currencyId: currencyId, invoiceDate: $('#InvoiceDate').val()  };
            AjaxCommunication.CreateRequest(this.window, 'Post', '@Url.Action("GetExchangeRateByCurrencyId", "PurchaseInvoice")', '', model,
            function (response) {
                if (true == response.Result.Status) {
                    $('#ExchangeRate').val(response.Result.Data);
                }
                else {
                    $('#ExchangeRate').val(0);
                }
            }, 
            function (XMLHttpRequest, textStatus, errorThrown) {
            errorCallback(XMLHttpRequest, textStatus, errorThrown);
        }, true, null, false);
        }
        else {
            $('#ExchangeRate').val(0);
        }
    }

    // begin form
    function BeginInvoiceMaster() {
        var form = $("#frmInvoiceMaster");
        $(form).removeData("validator").removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse($(form));
        var validator = $(form).validate();
        var isModelValid = $(form).valid();
        if (false == isModelValid) {
            validator.focusInvalid();
            return false;
        }
    }
    // success form
    function SuccessInvoiceMaster(data) {

        if (data.Result.Status) {
            $('#modal-invoice').modal('hide');
            fnSuccessNotify('Record saved sucessfully.');

            //$("#purchaseInvoiceGrid").DataTable().ajax.reload();

            var tabUrl = '@Url.Action("ManageInvoice", "PurchaseInvoice")?purchaseInvoiceId=' + data.Result.Data;
            window.location.href = tabUrl;

        }
        else {
            fnDangerNotify('Error occured while processing request.');
            return false;
        }
    }
</script>

<style type="text/css">
    .modal-body {
        height: 250px;
        overflow-y: auto;
    }

    @@media (min-height: 500px) {
        .modal-body {
            height: 400px;
        }
    }

    @@media (min-height: 800px) {
        .modal-body {
            height: 600px;
        }
    }
</style>
