@model PaymentVoucherModel

<div class="modal-dialog modal-lg">
    <div class="modal-content">
        <div class="modal-header">
            @if (Model.PaymentVoucherId > 0)
            {
<div class="modal-title">Edit Voucher</div> }
            else
            {
<div class="modal-title">Add Voucher</div>            }
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <form id="frmVoucherMaster" class="width100" method="post"
              asp-action="SaveVoucherMaster" asp-controller="PaymentVoucher" asp-area="Accounts"
              data-ajax-begin="return BeginVoucherMaster();" data-ajax-success="SuccessVoucherMaster"
              data-ajax="true" data-ajax-method="post">
            <div class="modal-body">
                @Html.HiddenFor(model => model.PaymentVoucherId)
                @Html.HiddenFor(model => model.CompanyId)
                @Html.HiddenFor(model => model.FinancialYearId)
                @Html.HiddenFor(model => model.VoucherNo)
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.VoucherNo, new { @class = "required" })
                                @Html.TextBoxFor(model => model.VoucherNo, new { @class = "form-control form-control-sm", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.VoucherNo)
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.VoucherDate, new { @class = "required" })
                                @Html.TextBoxFor(model => model.VoucherDate, "{0:dd/MMM/yyyy}", new { @class = "form-control form-control-sm", @placeholder = "DD/MMM/YYYY" })
                                @Html.ValidationMessageFor(model => model.VoucherDate)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.TypeCorB, new { @class = "required" })
                                @Html.DropDownListFor(model => model.TypeCorB, new SelectList(ViewBag.TypeCorBList, "Name", "Description"), "Select", new { @class = "form-control form-control-sm" })
                                @Html.ValidationMessageFor(model => model.TypeCorB)
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PaymentTypeId, new { @class = "required" })
                                    @Html.DropDownListFor(model => model.PaymentTypeId, new SelectList(ViewBag.PaymentTypeList, "Value", "Description"), "Select", new { @class = "form-control form-control-sm" })
                                    @Html.ValidationMessageFor(model => model.PaymentTypeId)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.AccountLedgerId, new { @class = "required" })
                                <select class="form-control" asp-for="AccountLedgerId">
                                    <option value="">Select</option>
                                </select>
                                @Html.ValidationMessageFor(model => model.AccountLedgerId)
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ClosingBalance)
                                @Html.TextBoxFor(model => model.ClosingBalance, new { @class = "form-control form-control-sm" })
                                @Html.ValidationMessageFor(model => model.ClosingBalance)
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.CurrencyId, new { @class = "required" })
                                @Html.DropDownListFor(model => model.CurrencyId, new SelectList(ViewBag.CurrencyList, "Value", "DisplayText"), "Select", new { @class = "form-control form-control-sm" })
                                @Html.ValidationMessageFor(model => model.CurrencyId)
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ExchangeRate, new { @class = "required" })
                                @Html.TextBoxFor(model => model.ExchangeRate, new { @class = "form-control form-control-sm decimal-two-scale" })
                                @Html.ValidationMessageFor(model => model.ExchangeRate)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ChequeNo)
                                @Html.TextBoxFor(model => model.ChequeNo, new { @class = "form-control form-control-sm" })
                                @Html.ValidationMessageFor(model => model.ChequeNo)
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ChequeDate, new { @class = "required" })
                                @Html.TextBoxFor(model => model.ChequeDate, "{0:dd/MMM/yyyy}", new { @class = "form-control form-control-sm", @placeholder = "DD/MMM/YYYY" })
                                @Html.ValidationMessageFor(model => model.ChequeDate)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ChequeAmountFc)
                                @Html.TextBoxFor(model => model.ChequeAmountFc, new { @class = "form-control form-control-sm decimal-two-scale" })
                                @Html.ValidationMessageFor(model => model.ChequeAmountFc)
                            </div>
                        </div>
                        @*<div class="col-sm-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DiscountPerOrAmountFc)
                                    @Html.TextBoxFor(model => model.DiscountPerOrAmountFc, new { @class = "form-control form-control-sm decimal-two-scale" })
                                    @Html.ValidationMessageFor(model => model.DiscountPerOrAmountFc)
                                </div>
                            </div>*@
                    </div>
                </div>
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Narration)
                                @Html.TextBoxFor(model => model.Narration, new { @class = "form-control form-control-sm" })
                                @Html.ValidationMessageFor(model => model.Narration)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" title="Cancel">Cancel</button>
                <button type="submit" class="btn btn-primary" title="Submit">Save</button>
            </div>
        </form>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $('#VoucherDate').datetimepicker({
            format: 'DD/MMM/YYYY',
            useCurrent: false,
            defaultDate: false, // setValue:''
            widgetPositioning: {
                horizontal: 'left',
                vertical: 'bottom'
            }
        });

        $('#ChequeDate').datetimepicker({
            format: 'DD/MMM/YYYY',
            useCurrent: false,
            defaultDate: false, // setValue:''
            widgetPositioning: {
                horizontal: 'left',
                vertical: 'bottom'
            }
        });

        $('.decimal-two-scale').autoNumeric('init', { vMin: '-999999999999999.999', vMax: '999999999999999.999' });

        if ('@Model.PaymentVoucherId' > 0 && '@Model.TypeCorB' != "") {
            GetAccountLedger('@Model.TypeCorB');
        }

        if ('@Model.PaymentVoucherId' > 0 && '@Model.AccountLedgerId' > 0) {
            GetClosingBalance('@Model.AccountLedgerId');
        }


        // TypeCorB change.
        $(document).on('change', '#TypeCorB', function () {
            GetAccountLedger(this.value);
        });

        //account ledger change.
        $(document).on('change', '#AccountLedgerId', function () {
            GetClosingBalance(this.value);
        });

        // currency change.
        $(document).on('change', '#CurrencyId', function () {
            GetExchangeRateByCurrencyId(this.value);
        });

    });

    // get Account Ledger by TypeCorB.
    function GetAccountLedger(typeCorB) {

        if ('' != typeCorB) {
            var model = { typeCorB: typeCorB };

            AjaxCommunication.CreateRequest(this.window, 'Post', '@Url.Action("GetAccountLedgerByTypeCorB", "PaymentVoucher")', '', model,
                function (response) {
                    $('#AccountLedgerId').empty();
                    $('#AccountLedgerId').append("<option value=''>Select</option>");

                    if (true == response.Result.Status) {
                        $.each(response.Result.Data, function (i, item) {
                            $('#AccountLedgerId').append("<option value='" + item.Value + "'>" + item.DisplayText + "</option>");
                        });

                        if ('@Model.TypeCorB' != "") {
                            $('#AccountLedgerId').val('@Model.AccountLedgerId');
                        }
                    }
                    else {
                        if ('NoItems' == response.Result.Message) {
                            $("span[data-valmsg-for='AccountLedgerId']").removeClass('field-validation-valid').addClass('field-validation-error');
                            $("span[data-valmsg-for='AccountLedgerId']").html('<span for="AccountLedgerId" class="">No data found.</span>');
                        }
                    }
                }, null, true, null, false);
        }
        else {
            $('#AccountLedgerId').empty();
            $('#AccountLedgerId').append("<option value=''>Select</option>");
        }
    }

    // get closing balance by accountLedgerId
    function GetClosingBalance(accountLedgerId) {
        if ('' != accountLedgerId) {
            var model = { accountLedgerId: accountLedgerId };

            AjaxCommunication.CreateRequest(this.window, 'Post', '@Url.Action("GetClosingBalanceByAccountLedgerId", "PaymentVoucher")', '', model,
            function (response) {
                if (true == response.Result.Status) {
                    $('#ClosingBalance').val(response.Result.Data);
                }
                else {
                    $('#ClosingBalance').val(0);
                }
            }, null, true, null, false);

        }
        else {
            $('#ClosingBalance').val(0);
        }
    }

    // get exchange rate by currencyId.
    function GetExchangeRateByCurrencyId(currencyId) {
        if ('' != currencyId) {

            var model = { currencyId: currencyId, voucherDate: $('#VoucherDate').val() };

            AjaxCommunication.CreateRequest(this.window, 'Post', '@Url.Action("GetExchangeRateByCurrencyId", "PaymentVoucher")', '', model,
            function (response) {
                if (true == response.Result.Status) {
                    $('#ExchangeRate').val(response.Result.Data);
                }
                else {
                    $('#ExchangeRate').val(0);
                }
            }, null, true, null, false);
        }
        else {
            $('#ExchangeRate').val(0);
        }
       /* $('#ExchangeRate').val(currencyId);*/
    }

    // begin form
    function BeginVoucherMaster() {
        var form = $("#frmVoucherMaster");
        $(form).removeData("validator").removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse($(form));
        var validator = $(form).validate();
        var isModelValid = $(form).valid();
        if (false == isModelValid) {
            validator.focusInvalid();
            return false;
        }
    }
    // success form
    function SuccessVoucherMaster(data) {
        if (data.Result.Status) {
            $('#modal-voucher').modal('hide');
            fnSuccessNotify('Record saved sucessfully.');
            $("#paymentVoucherGrid").DataTable().ajax.reload();
        }
        else {
            fnDangerNotify('Error occured while processing request.');
            return false;
        }
    }
</script>

<style type="text/css">
    .modal-body {
        height: 250px;
        overflow-y: auto;
    }

    @@media (min-height: 500px) {
        .modal-body {
            height: 400px;
        }
    }

    @@media (min-height: 800px) {
        .modal-body {
            height: 600px;
        }
    }
</style>
