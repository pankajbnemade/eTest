// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ERP.DataAccess.EntityModels;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using ERP.DataAccess.Entity;

namespace ERP.DataAccess.EntityData
{
    public partial class ErpDbContext : IdentityDbContext<ApplicationIdentityUser, ApplicationRole, int>
    {
        public ErpDbContext()
        {
        }

        public ErpDbContext(DbContextOptions<ErpDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Advanceadjustment> Advanceadjustments { get; set; }
        public virtual DbSet<Advanceadjustmentdetail> Advanceadjustmentdetails { get; set; }
        public virtual DbSet<Aspnetrole> Aspnetroles { get; set; }
        public virtual DbSet<Aspnetroleclaim> Aspnetroleclaims { get; set; }
        public virtual DbSet<Aspnetuser> Aspnetusers { get; set; }
        public virtual DbSet<Aspnetuserclaim> Aspnetuserclaims { get; set; }
        public virtual DbSet<Aspnetuserlogin> Aspnetuserlogins { get; set; }
        public virtual DbSet<Aspnetuserrole> Aspnetuserroles { get; set; }
        public virtual DbSet<Aspnetusertoken> Aspnetusertokens { get; set; }
        public virtual DbSet<Chargetype> Chargetypes { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Contravoucher> Contravouchers { get; set; }
        public virtual DbSet<Contravoucherdetail> Contravoucherdetails { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Creditnote> Creditnotes { get; set; }
        public virtual DbSet<Creditnotedetail> Creditnotedetails { get; set; }
        public virtual DbSet<Creditnotedetailtax> Creditnotedetailtaxes { get; set; }
        public virtual DbSet<Creditnotetax> Creditnotetaxes { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Currencyconversion> Currencyconversions { get; set; }
        public virtual DbSet<Debitnote> Debitnotes { get; set; }
        public virtual DbSet<Debitnotedetail> Debitnotedetails { get; set; }
        public virtual DbSet<Debitnotedetailtax> Debitnotedetailtaxes { get; set; }
        public virtual DbSet<Debitnotetax> Debitnotetaxes { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Financialyear> Financialyears { get; set; }
        public virtual DbSet<Financialyearcompanyrelation> Financialyearcompanyrelations { get; set; }
        public virtual DbSet<Form> Forms { get; set; }
        public virtual DbSet<Journalvoucher> Journalvouchers { get; set; }
        public virtual DbSet<Journalvoucherdetail> Journalvoucherdetails { get; set; }
        public virtual DbSet<Ledger> Ledgers { get; set; }
        public virtual DbSet<Ledgeraddress> Ledgeraddresses { get; set; }
        public virtual DbSet<Ledgercompanyrelation> Ledgercompanyrelations { get; set; }
        public virtual DbSet<Ledgerfinancialyearbalance> Ledgerfinancialyearbalances { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<Paymentvoucher> Paymentvouchers { get; set; }
        public virtual DbSet<Paymentvoucherdetail> Paymentvoucherdetails { get; set; }
        public virtual DbSet<Purchaseinvoice> Purchaseinvoices { get; set; }
        public virtual DbSet<Purchaseinvoicedetail> Purchaseinvoicedetails { get; set; }
        public virtual DbSet<Purchaseinvoicedetailtax> Purchaseinvoicedetailtaxes { get; set; }
        public virtual DbSet<Purchaseinvoicetax> Purchaseinvoicetaxes { get; set; }
        public virtual DbSet<Receiptvoucher> Receiptvouchers { get; set; }
        public virtual DbSet<Receiptvoucherdetail> Receiptvoucherdetails { get; set; }
        public virtual DbSet<Salesinvoice> Salesinvoices { get; set; }
        public virtual DbSet<Salesinvoicedetail> Salesinvoicedetails { get; set; }
        public virtual DbSet<Salesinvoicedetailtax> Salesinvoicedetailtaxes { get; set; }
        public virtual DbSet<Salesinvoicetax> Salesinvoicetaxes { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Status> Statuses { get; set; }
        public virtual DbSet<Taxregister> Taxregisters { get; set; }
        public virtual DbSet<Taxregisterdetail> Taxregisterdetails { get; set; }
        public virtual DbSet<Unitofmeasurement> Unitofmeasurements { get; set; }
        public virtual DbSet<Vouchersetup> Vouchersetups { get; set; }
        public virtual DbSet<Vouchersetupdetail> Vouchersetupdetails { get; set; }
        public virtual DbSet<Voucherstyle> Voucherstyles { get; set; }

//        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//        {
//            if (!optionsBuilder.IsConfigured)
//            {
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
//                optionsBuilder.UseMySql("server=127.0.0.1;user id=root;password=pgp_dev;database=erpdb", x => x.ServerVersion("8.0.23-mysql"));
//            }
//        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
           base.OnModelCreating(modelBuilder);
            modelBuilder.Entity<Advanceadjustment>(entity =>
            {
                entity.ToTable("advanceadjustment");

                entity.HasIndex(e => e.AccountLedgerId)
                    .HasName("IX_AdvanceAdjustment_AccountLedgerId");

                entity.HasIndex(e => e.AdvanceAdjustmentNo)
                    .HasName("DocumentNo_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_AdvanceAdjustment_CompanyId");

                entity.HasIndex(e => e.CurrencyId)
                    .HasName("FK_AdvanceAdjustment_Currency_CurrencyId_idx");

                entity.HasIndex(e => e.FinancialYearId)
                    .HasName("IX_AdvanceAdjustment_FinancialYearId");

                entity.HasIndex(e => e.PaymentVoucherId)
                    .HasName("IX_AdvanceAdjustment_PaymentVoucherId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_AdvanceAdjustment_aspnetusers_PreparedByUserId_idx");

                entity.HasIndex(e => e.ReceiptVoucherId)
                    .HasName("IX_AdvanceAdjustment_ReceiptVoucherId");

                entity.HasIndex(e => e.StatusId)
                    .HasName("IX_AdvanceAdjustment_StatusId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_AdvanceAdjustment_aspnetusers_UpdatedByUserId_idx");

                entity.HasIndex(e => e.VoucherStyleId)
                    .HasName("tf_idx");

                entity.Property(e => e.AdvanceAdjustmentDate).HasColumnType("datetime");

                entity.Property(e => e.AdvanceAdjustmentNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.Amount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.AmountFc)
                    .HasColumnName("Amount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.AmountFcinWord)
                    .HasColumnName("Amount_FCInWord")
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18,6)");

                entity.Property(e => e.Narration)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.AccountLedger)
                    .WithMany(p => p.Advanceadjustments)
                    .HasForeignKey(d => d.AccountLedgerId)
                    .HasConstraintName("FK_AdvanceAdjustment_Ledger_AccountLedgerId");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Advanceadjustments)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_AdvanceAdjustment_Company_CompanyId");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Advanceadjustments)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AdvanceAdjustment_Currency_CurrencyId");

                entity.HasOne(d => d.FinancialYear)
                    .WithMany(p => p.Advanceadjustments)
                    .HasForeignKey(d => d.FinancialYearId)
                    .HasConstraintName("FK_AdvanceAdjustment_FinancialYear_FinancialYearId");

                entity.HasOne(d => d.PaymentVoucher)
                    .WithMany(p => p.Advanceadjustments)
                    .HasForeignKey(d => d.PaymentVoucherId)
                    .HasConstraintName("FK_AdvanceAdjustment_PaymentVoucher_CompanyId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.AdvanceadjustmentPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_AdvanceAdjustment_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.ReceiptVoucher)
                    .WithMany(p => p.Advanceadjustments)
                    .HasForeignKey(d => d.ReceiptVoucherId)
                    .HasConstraintName("FK_AdvanceAdjustment_ReceiptVoucher_CompanyId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Advanceadjustments)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_AdvanceAdjustment_Status_StatusId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.AdvanceadjustmentUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_AdvanceAdjustment_aspnetusers_UpdatedByUserId");

                entity.HasOne(d => d.VoucherStyle)
                    .WithMany(p => p.Advanceadjustments)
                    .HasForeignKey(d => d.VoucherStyleId)
                    .HasConstraintName("FK_AdvanceAdjustment_VoucherStyle_VoucherStyleId");
            });

            modelBuilder.Entity<Advanceadjustmentdetail>(entity =>
            {
                entity.HasKey(e => e.AdvanceAdjustmentDetId)
                    .HasName("PRIMARY");

                entity.ToTable("advanceadjustmentdetail");

                entity.HasIndex(e => e.AdvanceAdjustmentId)
                    .HasName("IX_AdvanceAdjustmentDetails_AdvanceAdjustmentId");

                entity.HasIndex(e => e.CreditNoteId)
                    .HasName("IX_AdvanceAdjustmentDetails_CreditNoteId");

                entity.HasIndex(e => e.DebitNoteId)
                    .HasName("IX_AdvanceAdjustmentDetails_DebitNoteId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("IX_AdvanceAdjustmentDetails_PreparedByUserId");

                entity.HasIndex(e => e.PurchaseInvoiceId)
                    .HasName("IX_AdvanceAdjustmentDetails_PurchaseInvoiceId");

                entity.HasIndex(e => e.SalesInvoiceId)
                    .HasName("IX_AdvanceAdjustmentDetails_SalesInvoiceId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("IX_AdvanceAdjustmentDetails_UpdatedByUserId");

                entity.Property(e => e.Amount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.AmountFc)
                    .HasColumnName("Amount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.Narration)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.AdvanceAdjustment)
                    .WithMany(p => p.Advanceadjustmentdetails)
                    .HasForeignKey(d => d.AdvanceAdjustmentId)
                    .HasConstraintName("FK_AdvanceAdjustmentDetails_AdvanceAdj_AdvanceAdjustmentId");

                entity.HasOne(d => d.CreditNote)
                    .WithMany(p => p.Advanceadjustmentdetails)
                    .HasForeignKey(d => d.CreditNoteId)
                    .HasConstraintName("FK_AdvanceAdjustmentDetails_CreditNote_CreditNoteId");

                entity.HasOne(d => d.DebitNote)
                    .WithMany(p => p.Advanceadjustmentdetails)
                    .HasForeignKey(d => d.DebitNoteId)
                    .HasConstraintName("FK_AdvanceAdjustmentDetails_DebitNote_DebitNoteId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.AdvanceadjustmentdetailPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_AdvanceAdjustmentDetails_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.PurchaseInvoice)
                    .WithMany(p => p.Advanceadjustmentdetails)
                    .HasForeignKey(d => d.PurchaseInvoiceId)
                    .HasConstraintName("FK_AdvanceAdjustmentDetails_PurchaseInvoice_PurchaseInvoiceId");

                entity.HasOne(d => d.SalesInvoice)
                    .WithMany(p => p.Advanceadjustmentdetails)
                    .HasForeignKey(d => d.SalesInvoiceId)
                    .HasConstraintName("FK_AdvanceAdjustmentDetails_SalesInvoice_SalesInvoiceId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.AdvanceadjustmentdetailUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_AdvanceAdjustmentDetails_aspnetusers_UpdatedByUserId");
            });

            modelBuilder.Entity<Aspnetrole>(entity =>
            {
                entity.ToTable("aspnetroles");

                entity.HasIndex(e => e.NormalizedName)
                    .HasName("RoleNameIndex")
                    .IsUnique();

                entity.Property(e => e.ConcurrencyStamp)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.Name)
                    .HasColumnType("varchar(256)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.NormalizedName)
                    .HasColumnType("varchar(256)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");
            });

            modelBuilder.Entity<Aspnetroleclaim>(entity =>
            {
                entity.ToTable("aspnetroleclaims");

                entity.HasIndex(e => e.RoleId)
                    .HasName("IX_AspNetRoleClaims_RoleId");

                entity.Property(e => e.ClaimType)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ClaimValue)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Aspnetroleclaims)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId");
            });

            modelBuilder.Entity<Aspnetuser>(entity =>
            {
                entity.ToTable("aspnetusers");

                entity.HasIndex(e => e.NormalizedEmail)
                    .HasName("EmailIndex");

                entity.HasIndex(e => e.NormalizedUserName)
                    .HasName("UserNameIndex")
                    .IsUnique();

                entity.Property(e => e.ConcurrencyStamp)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.Email)
                    .HasColumnType("varchar(256)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.NormalizedEmail)
                    .HasColumnType("varchar(256)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.NormalizedUserName)
                    .HasColumnType("varchar(256)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PasswordHash)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PhoneNumber)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.SecurityStamp)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UserName)
                    .HasColumnType("varchar(256)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");
            });

            modelBuilder.Entity<Aspnetuserclaim>(entity =>
            {
                entity.ToTable("aspnetuserclaims");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_AspNetUserClaims_UserId");

                entity.Property(e => e.ClaimType)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ClaimValue)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Aspnetuserclaims)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_AspNetUserClaims_AspNetUsers_UserId");
            });

            modelBuilder.Entity<Aspnetuserlogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.ToTable("aspnetuserlogins");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_AspNetUserLogins_UserId");

                entity.Property(e => e.LoginProvider)
                    .HasColumnType("varchar(255)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ProviderKey)
                    .HasColumnType("varchar(255)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ProviderDisplayName)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Aspnetuserlogins)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_AspNetUserLogins_AspNetUsers_UserId");
            });

            modelBuilder.Entity<Aspnetuserrole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.ToTable("aspnetuserroles");

                entity.HasIndex(e => e.RoleId)
                    .HasName("IX_AspNetUserRoles_RoleId");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Aspnetuserroles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Aspnetuserroles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_AspNetUserRoles_AspNetUsers_UserId");
            });

            modelBuilder.Entity<Aspnetusertoken>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.ToTable("aspnetusertokens");

                entity.Property(e => e.LoginProvider)
                    .HasColumnType("varchar(255)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.Name)
                    .HasColumnType("varchar(255)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.Value)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Aspnetusertokens)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_AspNetUserTokens_AspNetUsers_UserId");
            });

            modelBuilder.Entity<Chargetype>(entity =>
            {
                entity.ToTable("chargetype");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_ChargeType_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_ChargeType_User_UpdatedByUserId_idx");

                entity.Property(e => e.ChargeTypeName)
                    .IsRequired()
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.ChargetypePreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_ChargeType_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.ChargetypeUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_ChargeType_User_UpdatedByUserId");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.ToTable("city");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_City_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.StateId)
                    .HasName("IX_City_StateId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_City_User_UpdatedByUserId_idx");

                entity.Property(e => e.CityName)
                    .IsRequired()
                    .HasColumnType("varchar(500)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.CityPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_City_User_PreparedByUserId");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.Cities)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_City_State_StateId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.CityUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_City_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.ToTable("company");

                entity.HasIndex(e => e.CurrencyId)
                    .HasName("IX_Company_CurrencyId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_Company_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_Company_User_UpdatedByUserId_idx");

                entity.Property(e => e.Address)
                    .HasColumnType("varchar(500)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.AlternatePhoneNo)
                    .HasColumnType("varchar(20)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.EmailAddress)
                    .HasColumnType("varchar(100)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.FaxNo)
                    .HasColumnType("varchar(20)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PhoneNo)
                    .HasColumnType("varchar(20)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PostalCode)
                    .HasColumnType("varchar(20)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Website)
                    .HasColumnType("varchar(100)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Companies)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_Company_Currency_CurrencyId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.CompanyPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_Company_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.CompanyUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_Company_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Contravoucher>(entity =>
            {
                entity.ToTable("contravoucher");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_ContraVoucher_CompanyId");

                entity.HasIndex(e => e.CurrencyId)
                    .HasName("IX_ContraVoucher_CurrencyId");

                entity.HasIndex(e => e.FinancialYearId)
                    .HasName("IX_ContraVoucher_FinancialYearId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("IX_ContraVoucher_PreparedByUserId");

                entity.HasIndex(e => e.StatusId)
                    .HasName("IX_ContraVoucher_StatusId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("IX_ContraVoucher_UpdatedByUserId");

                entity.HasIndex(e => e.VoucherNo)
                    .HasName("DocumentNo_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.VoucherStyleId)
                    .HasName("IX_ContraVoucher_VoucherStyleId");

                entity.Property(e => e.ChequeAmountFc)
                    .HasColumnName("ChequeAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.ChequeAmountFcinWord)
                    .HasColumnName("ChequeAmount_FCInWord")
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ChequeDate).HasColumnType("datetime");

                entity.Property(e => e.ChequeNo)
                    .HasColumnType("varchar(50)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.CreditAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.CreditAmountFc)
                    .HasColumnName("CreditAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.DebitAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.DebitAmountFc)
                    .HasColumnName("DebitAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18,6)");

                entity.Property(e => e.Narration)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.VoucherDate).HasColumnType("datetime");

                entity.Property(e => e.VoucherNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Contravouchers)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_ContraVoucher_Company_CompanyId");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Contravouchers)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContraVoucher_Currency_CurrencyId");

                entity.HasOne(d => d.FinancialYear)
                    .WithMany(p => p.Contravouchers)
                    .HasForeignKey(d => d.FinancialYearId)
                    .HasConstraintName("FK_ContraVoucher_FinancialYear_FinancialYearId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.ContravoucherPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_ContraVoucher_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Contravouchers)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_ContraVoucher_Status_StatusId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.ContravoucherUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_ContraVoucher_aspnetusers_UpdatedByUserId");

                entity.HasOne(d => d.VoucherStyle)
                    .WithMany(p => p.Contravouchers)
                    .HasForeignKey(d => d.VoucherStyleId)
                    .HasConstraintName("FK_ContraVoucher_VoucherStyle_VoucherStyleId");
            });

            modelBuilder.Entity<Contravoucherdetail>(entity =>
            {
                entity.HasKey(e => e.ContraVoucherDetId)
                    .HasName("PRIMARY");

                entity.ToTable("contravoucherdetail");

                entity.HasIndex(e => e.ContraVoucherId)
                    .HasName("IX_ContraVoucherDetails_ContraVoucherId");

                entity.HasIndex(e => e.ParticularLedgerId)
                    .HasName("IX_ContraVoucherDetails_ParticularLedgerId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("IX_ContraVoucherDetails_PreparedByUserId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("IX_ContraVoucherDetails_UpdatedByUserId");

                entity.Property(e => e.CreditAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.CreditAmountFc)
                    .HasColumnName("CreditAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.DebitAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.DebitAmountFc)
                    .HasColumnName("DebitAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.Narration)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.ContraVoucher)
                    .WithMany(p => p.Contravoucherdetails)
                    .HasForeignKey(d => d.ContraVoucherId)
                    .HasConstraintName("FK_ContraVoucherDetails_ContraVoucher_ContraVoucherId");

                entity.HasOne(d => d.ParticularLedger)
                    .WithMany(p => p.Contravoucherdetails)
                    .HasForeignKey(d => d.ParticularLedgerId)
                    .HasConstraintName("FK_ContraVoucherDetails_Ledger_ParticularLedgerId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.ContravoucherdetailPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_ContraVoucherDetails_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.ContravoucherdetailUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_ContraVoucherDetails_aspnetusers_UpdatedByUserId");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("country");

                entity.HasIndex(e => e.CountryName)
                    .HasName("Name_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_Country_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_Country_User_UpdatedByUserId_idx");

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasColumnType("varchar(500)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.CountryPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_Country_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.CountryUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_Country_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Creditnote>(entity =>
            {
                entity.ToTable("creditnote");

                entity.HasIndex(e => e.AccountLedgerId)
                    .HasName("IX_CreditNote_AccountLedgerId");

                entity.HasIndex(e => e.BillToAddressId)
                    .HasName("FK_CreditNote_Ledger_BillToAddressId_idx");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_CreditNote_CompanyId");

                entity.HasIndex(e => e.CreditNoteNo)
                    .HasName("DocumentNo_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.CurrencyId)
                    .HasName("IX_CreditNote_CurrencyId");

                entity.HasIndex(e => e.FinancialYearId)
                    .HasName("IX_CreditNote_FinancialYearId");

                entity.HasIndex(e => e.PartyLedgerId)
                    .HasName("IX_CreditNote_PartyLedgerId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_CreditNote_aspnetusers_PreparedByUserId_idx");

                entity.HasIndex(e => e.StatusId)
                    .HasName("IX_CreditNote_StatusId");

                entity.HasIndex(e => e.TaxRegisterId)
                    .HasName("IX_CreditNote_TaxRegisterId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_CreditNote_aspnetusers_UpdatedByUserId_idx");

                entity.HasIndex(e => e.VoucherStyleId)
                    .HasName("tf_idx");

                entity.Property(e => e.CreditNoteDate).HasColumnType("datetime");

                entity.Property(e => e.CreditNoteNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.DiscountAmountFc)
                    .HasColumnName("DiscountAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.DiscountPerOrAmountFc)
                    .HasColumnName("DiscountPerOrAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.DiscountPercentageOrAmount)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18,6)");

                entity.Property(e => e.GrossAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.GrossAmountFc)
                    .HasColumnName("GrossAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmountFc)
                    .HasColumnName("NetAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmountFcinWord)
                    .HasColumnName("NetAmount_FCInWord")
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.OurReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.OurReferenceNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PartyReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.PartyReferenceNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PaymentTerm)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxModelType)
                    .HasColumnType("varchar(50)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TotalLineItemAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TotalLineItemAmountFc)
                    .HasColumnName("TotalLineItemAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.AccountLedger)
                    .WithMany(p => p.CreditnoteAccountLedgers)
                    .HasForeignKey(d => d.AccountLedgerId)
                    .HasConstraintName("FK_CreditNote_Ledger_AccountLedgerId");

                entity.HasOne(d => d.BillToAddress)
                    .WithMany(p => p.Creditnotes)
                    .HasForeignKey(d => d.BillToAddressId)
                    .HasConstraintName("FK_CreditNote_Ledger_BillToAddressId");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Creditnotes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_CreditNote_Company_CompanyId");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Creditnotes)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditNote_Currency_CurrencyId");

                entity.HasOne(d => d.FinancialYear)
                    .WithMany(p => p.Creditnotes)
                    .HasForeignKey(d => d.FinancialYearId)
                    .HasConstraintName("FK_CreditNote_FinancialYear_FinancialYearId");

                entity.HasOne(d => d.PartyLedger)
                    .WithMany(p => p.CreditnotePartyLedgers)
                    .HasForeignKey(d => d.PartyLedgerId)
                    .HasConstraintName("FK_CreditNote_Ledger_PartyLedgerId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.CreditnotePreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_CreditNote_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Creditnotes)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_CreditNote_Status_StatusId");

                entity.HasOne(d => d.TaxRegister)
                    .WithMany(p => p.Creditnotes)
                    .HasForeignKey(d => d.TaxRegisterId)
                    .HasConstraintName("FK_CreditNote_TaxRegister_TaxRegisterId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.CreditnoteUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_CreditNote_aspnetusers_UpdatedByUserId");

                entity.HasOne(d => d.VoucherStyle)
                    .WithMany(p => p.Creditnotes)
                    .HasForeignKey(d => d.VoucherStyleId)
                    .HasConstraintName("FK_CreditNote_VoucherStyle_VoucherStyleId");
            });

            modelBuilder.Entity<Creditnotedetail>(entity =>
            {
                entity.HasKey(e => e.CreditNoteDetId)
                    .HasName("PRIMARY");

                entity.ToTable("creditnotedetail");

                entity.HasIndex(e => e.CreditNoteId)
                    .HasName("IX_CreditNoteDetails_CreditNoteId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_CreditNoteDetails_aspnetusers_PreparedByUserId_idx");

                entity.HasIndex(e => e.UnitOfMeasurementId)
                    .HasName("IX_CreditNoteDetails_UnitOfMeasurementId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_CreditNoteDetails_aspnetusers_UpdatedByUserId_idx");

                entity.Property(e => e.Description)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.GrossAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.GrossAmountFc)
                    .HasColumnName("GrossAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmountFc)
                    .HasColumnName("NetAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18,2)");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(18,4)");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreditNote)
                    .WithMany(p => p.Creditnotedetails)
                    .HasForeignKey(d => d.CreditNoteId)
                    .HasConstraintName("FK_CreditNoteDetails_CreditNote_CreditNoteId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.CreditnotedetailPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_CreditNoteDetails_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.UnitOfMeasurement)
                    .WithMany(p => p.Creditnotedetails)
                    .HasForeignKey(d => d.UnitOfMeasurementId)
                    .HasConstraintName("FK_CreditNoteDetails_UnitOfMeasurement_UnitOfMeasurementId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.CreditnotedetailUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_CreditNoteDetails_aspnetusers_UpdatedByUserId");
            });

            modelBuilder.Entity<Creditnotedetailtax>(entity =>
            {
                entity.HasKey(e => e.CreditNoteDetTaxId)
                    .HasName("PRIMARY");

                entity.ToTable("creditnotedetailtax");

                entity.HasIndex(e => e.CreditNoteDetId)
                    .HasName("IX_CreditNoteDetailTax_CreditNoteDetId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_CreditNoteDetailTax_Aspnetusers_PreparedByUserId_idx");

                entity.HasIndex(e => e.TaxLedgerId)
                    .HasName("IX_CreditNoteDetailTax_TaxLedgerId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_CreditNoteDetailTax_Aspnetusers_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAddOrDeduct)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPerOrAmountFc)
                    .HasColumnName("TaxPerOrAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPercentageOrAmount)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreditNoteDet)
                    .WithMany(p => p.Creditnotedetailtaxes)
                    .HasForeignKey(d => d.CreditNoteDetId)
                    .HasConstraintName("FK_PIDetailTax_InvoiceDetail_CreditNoteDetId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.CreditnotedetailtaxPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_CreditNoteDetailTax_Aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.TaxLedger)
                    .WithMany(p => p.Creditnotedetailtaxes)
                    .HasForeignKey(d => d.TaxLedgerId)
                    .HasConstraintName("FK_CreditNoteDetailTax_Ledger_TaxLedgerId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.CreditnotedetailtaxUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_CreditNoteDetailTax_Aspnetusers_aspnetusersUpdatedByUserId");
            });

            modelBuilder.Entity<Creditnotetax>(entity =>
            {
                entity.ToTable("creditnotetax");

                entity.HasIndex(e => e.CreditNoteId)
                    .HasName("IX_CreditNoteTax_CreditNoteId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_CreditNoteTax_aspnetusers_PreparedByUserId_idx");

                entity.HasIndex(e => e.TaxLedgerId)
                    .HasName("IX_CreditNoteTax_TaxLedgerId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_CreditNoteTax_aspnetusers_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAddOrDeduct)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPerOrAmountFc)
                    .HasColumnName("TaxPerOrAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPercentageOrAmount)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreditNote)
                    .WithMany(p => p.Creditnotetaxes)
                    .HasForeignKey(d => d.CreditNoteId)
                    .HasConstraintName("FK_CreditNoteTax_CreditNote_CreditNoteId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.CreditnotetaxPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_CreditNoteTax_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.TaxLedger)
                    .WithMany(p => p.Creditnotetaxes)
                    .HasForeignKey(d => d.TaxLedgerId)
                    .HasConstraintName("FK_CreditNoteTax_Ledger_TaxLedgerId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.CreditnotetaxUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_CreditNoteTax_aspnetusers_UpdatedByUserId");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.ToTable("currency");

                entity.HasIndex(e => e.CurrencyName)
                    .HasName("Name_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_Currency_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_Currency_User_UpdatedByUserId_idx");

                entity.Property(e => e.CurrencyCode)
                    .HasColumnType("varchar(50)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.CurrencyName)
                    .IsRequired()
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.Denomination)
                    .HasColumnType("varchar(50)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.CurrencyPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_Currency_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.CurrencyUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_Currency_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Currencyconversion>(entity =>
            {
                entity.HasKey(e => e.ConversionId)
                    .HasName("PRIMARY");

                entity.ToTable("currencyconversion");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_CurrencyConversion_CompanyId");

                entity.HasIndex(e => e.CurrencyId)
                    .HasName("IX_CurrencyConversion_CurrencyId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_CurrencyConversion_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_CurrencyConversion_User_UpdatedByUserId_idx");

                entity.Property(e => e.EffectiveDateTime).HasColumnType("datetime");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18,6)");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Currencyconversions)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_CurrencyConversion_Company_CompanyId");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Currencyconversions)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_CurrencyConversion_Currency_CurrencyId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.CurrencyconversionPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_CurrencyConversion_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.CurrencyconversionUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_CurrencyConversion_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Debitnote>(entity =>
            {
                entity.ToTable("debitnote");

                entity.HasIndex(e => e.AccountLedgerId)
                    .HasName("IX_DebitNote_AccountLedgerId");

                entity.HasIndex(e => e.BillToAddressId)
                    .HasName("FK_DebitNote_Ledger_BillToAddressId_idx");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_DebitNote_CompanyId");

                entity.HasIndex(e => e.CurrencyId)
                    .HasName("IX_DebitNote_CurrencyId");

                entity.HasIndex(e => e.DebitNoteNo)
                    .HasName("DocumentNo_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.FinancialYearId)
                    .HasName("IX_DebitNote_FinancialYearId");

                entity.HasIndex(e => e.PartyLedgerId)
                    .HasName("IX_DebitNote_PartyLedgerId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_DebitNote_aspnetusers_PreparedByUserId_idx");

                entity.HasIndex(e => e.StatusId)
                    .HasName("IX_DebitNote_StatusId");

                entity.HasIndex(e => e.TaxRegisterId)
                    .HasName("IX_DebitNote_TaxRegisterId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_DebitNote_aspnetusers_UpdatedByUserId_idx");

                entity.HasIndex(e => e.VoucherStyleId)
                    .HasName("tf_idx");

                entity.Property(e => e.DebitNoteDate).HasColumnType("datetime");

                entity.Property(e => e.DebitNoteNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.DiscountAmountFc)
                    .HasColumnName("DiscountAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.DiscountPerOrAmountFc)
                    .HasColumnName("DiscountPerOrAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.DiscountPercentageOrAmount)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18,6)");

                entity.Property(e => e.GrossAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.GrossAmountFc)
                    .HasColumnName("GrossAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmountFc)
                    .HasColumnName("NetAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmountFcinWord)
                    .HasColumnName("NetAmount_FCInWord")
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.OurReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.OurReferenceNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PartyReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.PartyReferenceNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PaymentTerm)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxModelType)
                    .HasColumnType("varchar(50)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TotalLineItemAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TotalLineItemAmountFc)
                    .HasColumnName("TotalLineItemAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.AccountLedger)
                    .WithMany(p => p.DebitnoteAccountLedgers)
                    .HasForeignKey(d => d.AccountLedgerId)
                    .HasConstraintName("FK_DebitNote_Ledger_AccountLedgerId");

                entity.HasOne(d => d.BillToAddress)
                    .WithMany(p => p.Debitnotes)
                    .HasForeignKey(d => d.BillToAddressId)
                    .HasConstraintName("FK_DebitNote_Ledger_BillToAddressId");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Debitnotes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_DebitNote_Company_CompanyId");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Debitnotes)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebitNote_Currency_CurrencyId");

                entity.HasOne(d => d.FinancialYear)
                    .WithMany(p => p.Debitnotes)
                    .HasForeignKey(d => d.FinancialYearId)
                    .HasConstraintName("FK_DebitNote_FinancialYear_FinancialYearId");

                entity.HasOne(d => d.PartyLedger)
                    .WithMany(p => p.DebitnotePartyLedgers)
                    .HasForeignKey(d => d.PartyLedgerId)
                    .HasConstraintName("FK_DebitNote_Ledger_PartyLedgerId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.DebitnotePreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_DebitNote_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Debitnotes)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_DebitNote_Status_StatusId");

                entity.HasOne(d => d.TaxRegister)
                    .WithMany(p => p.Debitnotes)
                    .HasForeignKey(d => d.TaxRegisterId)
                    .HasConstraintName("FK_DebitNote_TaxRegister_TaxRegisterId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.DebitnoteUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_DebitNote_aspnetusers_UpdatedByUserId");

                entity.HasOne(d => d.VoucherStyle)
                    .WithMany(p => p.Debitnotes)
                    .HasForeignKey(d => d.VoucherStyleId)
                    .HasConstraintName("FK_DebitNote_VoucherStyle_VoucherStyleId");
            });

            modelBuilder.Entity<Debitnotedetail>(entity =>
            {
                entity.HasKey(e => e.DebitNoteDetId)
                    .HasName("PRIMARY");

                entity.ToTable("debitnotedetail");

                entity.HasIndex(e => e.DebitNoteId)
                    .HasName("IX_DebitNoteDetails_DebitNoteId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_DebitNoteDetails_aspnetusers_PreparedByUserId_idx");

                entity.HasIndex(e => e.UnitOfMeasurementId)
                    .HasName("IX_DebitNoteDetails_UnitOfMeasurementId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_DebitNoteDetails_aspnetusers_UpdatedByUserId_idx");

                entity.Property(e => e.Description)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.GrossAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.GrossAmountFc)
                    .HasColumnName("GrossAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmountFc)
                    .HasColumnName("NetAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18,2)");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(18,4)");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.DebitNote)
                    .WithMany(p => p.Debitnotedetails)
                    .HasForeignKey(d => d.DebitNoteId)
                    .HasConstraintName("FK_DebitNoteDetails_DebitNote_DebitNoteId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.DebitnotedetailPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_DebitNoteDetails_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.UnitOfMeasurement)
                    .WithMany(p => p.Debitnotedetails)
                    .HasForeignKey(d => d.UnitOfMeasurementId)
                    .HasConstraintName("FK_DebitNoteDetails_UnitOfMeasurement_UnitOfMeasurementId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.DebitnotedetailUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_DebitNoteDetails_aspnetusers_UpdatedByUserId");
            });

            modelBuilder.Entity<Debitnotedetailtax>(entity =>
            {
                entity.HasKey(e => e.DebitNoteDetTaxId)
                    .HasName("PRIMARY");

                entity.ToTable("debitnotedetailtax");

                entity.HasIndex(e => e.DebitNoteDetId)
                    .HasName("IX_DebitNoteDetailTax_DebitNoteDetId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_DebitNoteDetailTax_Aspnetusers_PreparedByUserId_idx");

                entity.HasIndex(e => e.TaxLedgerId)
                    .HasName("IX_DebitNoteDetailTax_TaxLedgerId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_DebitNoteDetailTax_Aspnetusers_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAddOrDeduct)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPerOrAmountFc)
                    .HasColumnName("TaxPerOrAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPercentageOrAmount)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.DebitNoteDet)
                    .WithMany(p => p.Debitnotedetailtaxes)
                    .HasForeignKey(d => d.DebitNoteDetId)
                    .HasConstraintName("FK_PIDetailTax_InvoiceDetail_DebitNoteDetId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.DebitnotedetailtaxPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_DebitNoteDetailTax_Aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.TaxLedger)
                    .WithMany(p => p.Debitnotedetailtaxes)
                    .HasForeignKey(d => d.TaxLedgerId)
                    .HasConstraintName("FK_DebitNoteDetailTax_Ledger_TaxLedgerId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.DebitnotedetailtaxUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_DebitNoteDetailTax_Aspnetusers_aspnetusersUpdatedByUserId");
            });

            modelBuilder.Entity<Debitnotetax>(entity =>
            {
                entity.ToTable("debitnotetax");

                entity.HasIndex(e => e.DebitNoteId)
                    .HasName("IX_DebitNoteTax_DebitNoteId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_DebitNoteTax_aspnetusers_PreparedByUserId_idx");

                entity.HasIndex(e => e.TaxLedgerId)
                    .HasName("IX_DebitNoteTax_TaxLedgerId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_DebitNoteTax_aspnetusers_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAddOrDeduct)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPerOrAmountFc)
                    .HasColumnName("TaxPerOrAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPercentageOrAmount)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.DebitNote)
                    .WithMany(p => p.Debitnotetaxes)
                    .HasForeignKey(d => d.DebitNoteId)
                    .HasConstraintName("FK_DebitNoteTax_DebitNote_DebitNoteId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.DebitnotetaxPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_DebitNoteTax_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.TaxLedger)
                    .WithMany(p => p.Debitnotetaxes)
                    .HasForeignKey(d => d.TaxLedgerId)
                    .HasConstraintName("FK_DebitNoteTax_Ledger_TaxLedgerId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.DebitnotetaxUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_DebitNoteTax_aspnetusers_UpdatedByUserId");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.ToTable("department");

                entity.HasIndex(e => e.DepartmentName)
                    .HasName("Name_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_Department_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_Department_User_UpdatedByUserId_idx");

                entity.Property(e => e.DepartmentName)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.DepartmentPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_Department_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.DepartmentUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_Department_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Designation>(entity =>
            {
                entity.ToTable("designation");

                entity.HasIndex(e => e.DesignationName)
                    .HasName("Name_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_Designation_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_Designation_User_UpdatedByUserId_idx");

                entity.Property(e => e.DesignationName)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.DesignationPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_Designation_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.DesignationUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_Designation_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("employee");

                entity.HasIndex(e => e.DepartmentId)
                    .HasName("IX_Employee_DepartmentId");

                entity.HasIndex(e => e.DesignationId)
                    .HasName("IX_Employee_DesignationId");

                entity.HasIndex(e => e.EmployeeCode)
                    .HasName("Code_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_Employee_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_Employee_User_UpdatedByUserId_idx");

                entity.Property(e => e.EmailAddress)
                    .HasColumnType("text")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.EmployeeCode)
                    .HasColumnType("varchar(50)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.FirstName)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.LastName)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Employee_Department_DepartmentId");

                entity.HasOne(d => d.Designation)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.DesignationId)
                    .HasConstraintName("FK_Employee_Designation_DesignationId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.EmployeePreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_Employee_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.EmployeeUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_Employee_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Financialyear>(entity =>
            {
                entity.ToTable("financialyear");

                entity.HasIndex(e => e.FinancialYearName)
                    .HasName("Name_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_FinancialYear_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_FinancialYear_User_UpdatedByUserId_idx");

                entity.Property(e => e.FinancialYearName)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.FinancialyearPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_FinancialYear_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.FinancialyearUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_FinancialYear_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Financialyearcompanyrelation>(entity =>
            {
                entity.HasKey(e => e.RelationId)
                    .HasName("PRIMARY");

                entity.ToTable("financialyearcompanyrelation");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_FinancialYearCompanyRelation_CompanyId");

                entity.HasIndex(e => e.FinancialYearId)
                    .HasName("IX_FinancialYearCompanyRelation_FinancialYearId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_FinancialYearCompanyRelation_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_FinancialYearCompanyRelation_User_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Financialyearcompanyrelations)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_FinancialYearCompanyRelation_Company_CompanyId");

                entity.HasOne(d => d.FinancialYear)
                    .WithMany(p => p.Financialyearcompanyrelations)
                    .HasForeignKey(d => d.FinancialYearId)
                    .HasConstraintName("FK_FinancialYearCompanyRelation_FinancialYear_FinancialYearId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.FinancialyearcompanyrelationPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_FinancialYearCompanyRelation_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.FinancialyearcompanyrelationUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_FinancialYearCompanyRelation_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Form>(entity =>
            {
                entity.ToTable("form");

                entity.HasIndex(e => e.FormName)
                    .HasName("Name_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.ModuleId)
                    .HasName("IX_Form_Module_ModuleId_idx");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_Form_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_Form_User_UpdatedByUserId_idx");

                entity.Property(e => e.FormName)
                    .IsRequired()
                    .HasColumnType("varchar(500)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.Forms)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_Form_Module_ModuleId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.FormPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_Form_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.FormUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_Form_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Journalvoucher>(entity =>
            {
                entity.ToTable("journalvoucher");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_JournalVoucher_CompanyId");

                entity.HasIndex(e => e.CurrencyId)
                    .HasName("IX_JournalVoucher_CurrencyId");

                entity.HasIndex(e => e.FinancialYearId)
                    .HasName("IX_JournalVoucher_FinancialYearId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("IX_JournalVoucher_PreparedByUserId");

                entity.HasIndex(e => e.StatusId)
                    .HasName("IX_JournalVoucher_StatusId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("IX_JournalVoucher_UpdatedByUserId");

                entity.HasIndex(e => e.VoucherNo)
                    .HasName("DocumentNo_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.VoucherStyleId)
                    .HasName("IX_JournalVoucher_VoucherStyleId");

                entity.Property(e => e.Amount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.AmountFc)
                    .HasColumnName("Amount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.AmountFcinWord)
                    .HasColumnName("Amount_FCInWord")
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.CreditAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.CreditAmountFc)
                    .HasColumnName("CreditAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.DebitAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.DebitAmountFc)
                    .HasColumnName("DebitAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18,6)");

                entity.Property(e => e.Narration)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.VoucherDate).HasColumnType("datetime");

                entity.Property(e => e.VoucherNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Journalvouchers)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_JournalVoucher_Company_CompanyId");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Journalvouchers)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JournalVoucher_Currency_CurrencyId");

                entity.HasOne(d => d.FinancialYear)
                    .WithMany(p => p.Journalvouchers)
                    .HasForeignKey(d => d.FinancialYearId)
                    .HasConstraintName("FK_JournalVoucher_FinancialYear_FinancialYearId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.JournalvoucherPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_JournalVoucher_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Journalvouchers)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_JournalVoucher_Status_StatusId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.JournalvoucherUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_JournalVoucher_aspnetusers_UpdatedByUserId");

                entity.HasOne(d => d.VoucherStyle)
                    .WithMany(p => p.Journalvouchers)
                    .HasForeignKey(d => d.VoucherStyleId)
                    .HasConstraintName("FK_JournalVoucher_VoucherStyle_VoucherStyleId");
            });

            modelBuilder.Entity<Journalvoucherdetail>(entity =>
            {
                entity.HasKey(e => e.JournalVoucherDetId)
                    .HasName("PRIMARY");

                entity.ToTable("journalvoucherdetail");

                entity.HasIndex(e => e.CreditNoteId)
                    .HasName("IX_JournalVoucherDetails_CreditNoteId_idx");

                entity.HasIndex(e => e.DebitNoteId)
                    .HasName("IX_JournalVoucherDetails_DebitNoteId_idx");

                entity.HasIndex(e => e.JournalVoucherId)
                    .HasName("IX_JournalVoucherDetails_JournalVoucherId");

                entity.HasIndex(e => e.ParticularLedgerId)
                    .HasName("IX_JournalVoucherDetails_ParticularLedgerId_idx");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("IX_JournalVoucherDetails_PreparedByUserId_idx");

                entity.HasIndex(e => e.PurchaseInvoiceId)
                    .HasName("IX_JournalVoucherDetails_PurchaseInvoiceId_idx");

                entity.HasIndex(e => e.SalesInvoiceId)
                    .HasName("IX_JournalVoucherDetails_SalesInvoiceId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("IX_JournalVoucherDetails_UpdatedByUserId_idx");

                entity.Property(e => e.CreditAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.CreditAmountFc)
                    .HasColumnName("CreditAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.DebitAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.DebitAmountFc)
                    .HasColumnName("DebitAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.Narration)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreditNote)
                    .WithMany(p => p.Journalvoucherdetails)
                    .HasForeignKey(d => d.CreditNoteId)
                    .HasConstraintName("FK_JournalVoucherDetails_CreditNote_CreditNoteId");

                entity.HasOne(d => d.DebitNote)
                    .WithMany(p => p.Journalvoucherdetails)
                    .HasForeignKey(d => d.DebitNoteId)
                    .HasConstraintName("FK_JournalVoucherDetails_DebitNote_DebitNoteId");

                entity.HasOne(d => d.JournalVoucher)
                    .WithMany(p => p.Journalvoucherdetails)
                    .HasForeignKey(d => d.JournalVoucherId)
                    .HasConstraintName("FK_JournalVoucherDetails_JournalVoucher_JournalVoucherId");

                entity.HasOne(d => d.ParticularLedger)
                    .WithMany(p => p.Journalvoucherdetails)
                    .HasForeignKey(d => d.ParticularLedgerId)
                    .HasConstraintName("FK_JournalVoucherDetails_Ledger_ParticularLedgerId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.JournalvoucherdetailPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_JournalVoucherDetails_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.PurchaseInvoice)
                    .WithMany(p => p.Journalvoucherdetails)
                    .HasForeignKey(d => d.PurchaseInvoiceId)
                    .HasConstraintName("FK_JournalVoucherDetails_PurchaseInvoice_PurchaseInvoiceId");

                entity.HasOne(d => d.SalesInvoice)
                    .WithMany(p => p.Journalvoucherdetails)
                    .HasForeignKey(d => d.SalesInvoiceId)
                    .HasConstraintName("FK_JournalVoucherDetails_SalesInvoice_SalesInvoiceId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.JournalvoucherdetailUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_JournalVoucherDetails_aspnetusers_UpdatedByUserId");
            });

            modelBuilder.Entity<Ledger>(entity =>
            {
                entity.ToTable("ledger");

                entity.HasIndex(e => e.LedgerCode)
                    .HasName("Code_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.ParentGroupId)
                    .HasName("IX_Ledger_ParentGroupId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_Ledger_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_Ledger_User_UpdatedByUserId_idx");

                entity.Property(e => e.LedgerCode)
                    .IsRequired()
                    .HasColumnType("varchar(100)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.LedgerName)
                    .IsRequired()
                    .HasColumnType("varchar(500)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.TaxRegisteredNo)
                    .HasColumnType("varchar(100)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.ParentGroup)
                    .WithMany(p => p.InverseParentGroup)
                    .HasForeignKey(d => d.ParentGroupId)
                    .HasConstraintName("FK_Ledger_Ledger_ParentGroupId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.LedgerPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_Ledger_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.LedgerUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_Ledger_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Ledgeraddress>(entity =>
            {
                entity.HasKey(e => e.AddressId)
                    .HasName("PRIMARY");

                entity.ToTable("ledgeraddress");

                entity.HasIndex(e => e.CityId)
                    .HasName("IX_LedgerAddress_CityId");

                entity.HasIndex(e => e.CountryId)
                    .HasName("IX_LedgerAddress_CountryId");

                entity.HasIndex(e => e.LedgerId)
                    .HasName("IX_LedgerAddress_LedgerId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_LedgerAddress_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.StateId)
                    .HasName("IX_LedgerAddress_StateId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_LedgerAddress_User_UpdatedByUserId_idx");

                entity.Property(e => e.AddressDescription)
                    .HasColumnType("varchar(1000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.EmailAddress)
                    .HasColumnType("varchar(100)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.FaxNo)
                    .HasColumnType("varchar(20)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PhoneNo)
                    .HasColumnType("varchar(20)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PostalCode)
                    .HasColumnType("varchar(20)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Ledgeraddresses)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_LedgerAddress_City_CityId");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Ledgeraddresses)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_LedgerAddress_Country_CountryId");

                entity.HasOne(d => d.Ledger)
                    .WithMany(p => p.Ledgeraddresses)
                    .HasForeignKey(d => d.LedgerId)
                    .HasConstraintName("FK_LedgerAddress_Ledger_LedgerId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.LedgeraddressPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_LedgerAddress_User_PreparedByUserId");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.Ledgeraddresses)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_LedgerAddress_State_StateId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.LedgeraddressUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_LedgerAddress_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Ledgercompanyrelation>(entity =>
            {
                entity.HasKey(e => e.RelationId)
                    .HasName("PRIMARY");

                entity.ToTable("ledgercompanyrelation");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_LedgerCompanyRelation_CompanyId");

                entity.HasIndex(e => e.LedgerId)
                    .HasName("IX_LedgerCompanyRelation_LedgerId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_LedgerCompanyRelation_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_LedgerCompanyRelation_User_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Ledgercompanyrelations)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_LedgerCompanyRelation_Company_CompanyId");

                entity.HasOne(d => d.Ledger)
                    .WithMany(p => p.Ledgercompanyrelations)
                    .HasForeignKey(d => d.LedgerId)
                    .HasConstraintName("FK_LedgerCompanyRelation_Ledger_LedgerId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.LedgercompanyrelationPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_LedgerCompanyRelation_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.LedgercompanyrelationUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_LedgerCompanyRelation_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Ledgerfinancialyearbalance>(entity =>
            {
                entity.HasKey(e => e.LedgerBalanceId)
                    .HasName("PRIMARY");

                entity.ToTable("ledgerfinancialyearbalance");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_LedgerFinancialYearBalance_CompanyId");

                entity.HasIndex(e => e.CurrencyId)
                    .HasName("IX_LedgerFinancialYearBalance_CurrencyId");

                entity.HasIndex(e => e.FinancialYearId)
                    .HasName("IX_LedgerFinancialYearBalance_FinancialYearId");

                entity.HasIndex(e => e.LedgerId)
                    .HasName("IX_LedgerFinancialYearBalance_LedgerId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_LedgerFinancialYearBalance_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_LedgerFinancialYearBalance_User_UpdatedByUserId_idx");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18,6)");

                entity.Property(e => e.OpeningBalanceAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.OpeningBalanceAmountFc)
                    .HasColumnName("OpeningBalanceAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Ledgerfinancialyearbalances)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_LedgerFinancialYearBalance_Company_CompanyId");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Ledgerfinancialyearbalances)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LedgerFinancialYearBalance_Currency_CurrencyId");

                entity.HasOne(d => d.FinancialYear)
                    .WithMany(p => p.Ledgerfinancialyearbalances)
                    .HasForeignKey(d => d.FinancialYearId)
                    .HasConstraintName("FK_LedgerFinancialYearBalance_FinancialYear_FinancialYearId");

                entity.HasOne(d => d.Ledger)
                    .WithMany(p => p.Ledgerfinancialyearbalances)
                    .HasForeignKey(d => d.LedgerId)
                    .HasConstraintName("FK_LedgerFinancialYearBalance_Ledger_LedgerId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.LedgerfinancialyearbalancePreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_LedgerFinancialYearBalance_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.LedgerfinancialyearbalanceUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_LedgerFinancialYearBalance_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Module>(entity =>
            {
                entity.ToTable("module");

                entity.HasIndex(e => e.ModuleName)
                    .HasName("Name_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_Module_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_Module_User_UpdatedByUserId_idx");

                entity.Property(e => e.ModuleName)
                    .IsRequired()
                    .HasColumnType("varchar(500)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.ModulePreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_Module_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.ModuleUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_Module_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Paymentvoucher>(entity =>
            {
                entity.ToTable("paymentvoucher");

                entity.HasIndex(e => e.AccountLedgerId)
                    .HasName("IX_PaymentVoucher_AccountLedgerId");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_PaymentVoucher_CompanyId");

                entity.HasIndex(e => e.CurrencyId)
                    .HasName("IX_PaymentVoucher_CurrencyId");

                entity.HasIndex(e => e.FinancialYearId)
                    .HasName("IX_PaymentVoucher_FinancialYearId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("IX_PaymentVoucher_PreparedByUserId");

                entity.HasIndex(e => e.StatusId)
                    .HasName("IX_PaymentVoucher_StatusId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("IX_PaymentVoucher_UpdatedByUserId");

                entity.HasIndex(e => e.VoucherNo)
                    .HasName("DocumentNo_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.VoucherStyleId)
                    .HasName("IX_PaymentVoucher_VoucherStyleId");

                entity.Property(e => e.Amount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.AmountFc)
                    .HasColumnName("Amount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.AmountFcinWord)
                    .HasColumnName("Amount_FCInWord")
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ChequeAmountFc)
                    .HasColumnName("ChequeAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.ChequeDate).HasColumnType("datetime");

                entity.Property(e => e.ChequeNo)
                    .HasColumnType("varchar(50)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18,6)");

                entity.Property(e => e.Narration)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.TypeCorB)
                    .HasColumnType("varchar(1)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.VoucherDate).HasColumnType("datetime");

                entity.Property(e => e.VoucherNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.HasOne(d => d.AccountLedger)
                    .WithMany(p => p.Paymentvouchers)
                    .HasForeignKey(d => d.AccountLedgerId)
                    .HasConstraintName("FK_PaymentVoucher_Ledger_AccountLedgerId");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Paymentvouchers)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_PaymentVoucher_Company_CompanyId");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Paymentvouchers)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentVoucher_Currency_CurrencyId");

                entity.HasOne(d => d.FinancialYear)
                    .WithMany(p => p.Paymentvouchers)
                    .HasForeignKey(d => d.FinancialYearId)
                    .HasConstraintName("FK_PaymentVoucher_FinancialYear_FinancialYearId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.PaymentvoucherPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_PaymentVoucher_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Paymentvouchers)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_PaymentVoucher_Status_StatusId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.PaymentvoucherUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_PaymentVoucher_aspnetusers_UpdatedByUserId");

                entity.HasOne(d => d.VoucherStyle)
                    .WithMany(p => p.Paymentvouchers)
                    .HasForeignKey(d => d.VoucherStyleId)
                    .HasConstraintName("FK_PaymentVoucher_VoucherStyle_VoucherStyleId");
            });

            modelBuilder.Entity<Paymentvoucherdetail>(entity =>
            {
                entity.HasKey(e => e.PaymentVoucherDetId)
                    .HasName("PRIMARY");

                entity.ToTable("paymentvoucherdetail");

                entity.HasIndex(e => e.CreditNoteId)
                    .HasName("IX_PaymentVoucherDetails_CreditNoteId");

                entity.HasIndex(e => e.DebitNoteId)
                    .HasName("IX_PaymentVoucherDetails_DebitNoteId");

                entity.HasIndex(e => e.ParticularLedgerId)
                    .HasName("IX_PaymentVoucherDetails_ParticularLedgerId");

                entity.HasIndex(e => e.PaymentVoucherId)
                    .HasName("IX_PaymentVoucherDetails_PaymentVoucherId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("IX_PaymentVoucherDetails_PreparedByUserId");

                entity.HasIndex(e => e.PurchaseInvoiceId)
                    .HasName("IX_PaymentVoucherDetails_PurchaseInvoiceId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("IX_PaymentVoucherDetails_UpdatedByUserId");

                entity.Property(e => e.Amount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.AmountFc)
                    .HasColumnName("Amount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.Narration)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreditNote)
                    .WithMany(p => p.Paymentvoucherdetails)
                    .HasForeignKey(d => d.CreditNoteId)
                    .HasConstraintName("FK_PaymentVoucherDetails_CreditNote_CreditNoteId");

                entity.HasOne(d => d.DebitNote)
                    .WithMany(p => p.Paymentvoucherdetails)
                    .HasForeignKey(d => d.DebitNoteId)
                    .HasConstraintName("FK_PaymentVoucherDetails_DebitNote_DebitNoteId");

                entity.HasOne(d => d.ParticularLedger)
                    .WithMany(p => p.Paymentvoucherdetails)
                    .HasForeignKey(d => d.ParticularLedgerId)
                    .HasConstraintName("FK_PaymentVoucherDetails_Ledger_ParticularLedgerId");

                entity.HasOne(d => d.PaymentVoucher)
                    .WithMany(p => p.Paymentvoucherdetails)
                    .HasForeignKey(d => d.PaymentVoucherId)
                    .HasConstraintName("FK_PaymentVoucherDetails_PaymentVoucher_PaymentVoucherId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.PaymentvoucherdetailPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_PaymentVoucherDetails_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.PurchaseInvoice)
                    .WithMany(p => p.Paymentvoucherdetails)
                    .HasForeignKey(d => d.PurchaseInvoiceId)
                    .HasConstraintName("FK_PaymentVoucherDetails_PurchaseInvoice_PurchaseInvoiceId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.PaymentvoucherdetailUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_PaymentVoucherDetails_aspnetusers_UpdatedByUserId");
            });

            modelBuilder.Entity<Purchaseinvoice>(entity =>
            {
                entity.ToTable("purchaseinvoice");

                entity.HasIndex(e => e.AccountLedgerId)
                    .HasName("IX_PurchaseInvoice_AccountLedgerId");

                entity.HasIndex(e => e.BillToAddressId)
                    .HasName("FK_PurchaseInvoice_Ledger_BillToAddressId_idx");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_PurchaseInvoice_CompanyId");

                entity.HasIndex(e => e.CurrencyId)
                    .HasName("IX_PurchaseInvoice_CurrencyId");

                entity.HasIndex(e => e.FinancialYearId)
                    .HasName("IX_PurchaseInvoice_FinancialYearId");

                entity.HasIndex(e => e.InvoiceNo)
                    .HasName("DocumentNo_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_PurchaseInvoice_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.StatusId)
                    .HasName("IX_PurchaseInvoice_StatusId");

                entity.HasIndex(e => e.SupplierLedgerId)
                    .HasName("IX_PurchaseInvoice_SupplierLedgerId");

                entity.HasIndex(e => e.TaxRegisterId)
                    .HasName("IX_PurchaseInvoice_TaxRegisterId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_PurchaseInvoice_User_UpdatedByUserId_idx");

                entity.HasIndex(e => e.VoucherStyleId)
                    .HasName("tf_idx");

                entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.DiscountAmountFc)
                    .HasColumnName("DiscountAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.DiscountPerOrAmountFc)
                    .HasColumnName("DiscountPerOrAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.DiscountPercentageOrAmount)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18,6)");

                entity.Property(e => e.GrossAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.GrossAmountFc)
                    .HasColumnName("GrossAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.NetAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmountFc)
                    .HasColumnName("NetAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmountFcinWord)
                    .HasColumnName("NetAmount_FCInWord")
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PaymentTerm)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.SupplierReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.SupplierReferenceNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxModelType)
                    .HasColumnType("varchar(50)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TotalLineItemAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TotalLineItemAmountFc)
                    .HasColumnName("TotalLineItemAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.AccountLedger)
                    .WithMany(p => p.PurchaseinvoiceAccountLedgers)
                    .HasForeignKey(d => d.AccountLedgerId)
                    .HasConstraintName("FK_PurchaseInvoice_Ledger_AccountLedgerId");

                entity.HasOne(d => d.BillToAddress)
                    .WithMany(p => p.Purchaseinvoices)
                    .HasForeignKey(d => d.BillToAddressId)
                    .HasConstraintName("FK_PurchaseInvoice_Ledger_BillToAddressId");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Purchaseinvoices)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_PurchaseInvoice_Company_CompanyId");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Purchaseinvoices)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoice_Currency_CurrencyId");

                entity.HasOne(d => d.FinancialYear)
                    .WithMany(p => p.Purchaseinvoices)
                    .HasForeignKey(d => d.FinancialYearId)
                    .HasConstraintName("FK_PurchaseInvoice_FinancialYear_FinancialYearId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.PurchaseinvoicePreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_PurchaseInvoice_User_PreparedByUserId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Purchaseinvoices)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_PurchaseInvoice_Status_StatusId");

                entity.HasOne(d => d.SupplierLedger)
                    .WithMany(p => p.PurchaseinvoiceSupplierLedgers)
                    .HasForeignKey(d => d.SupplierLedgerId)
                    .HasConstraintName("FK_PurchaseInvoice_Ledger_SupplierLedgerId");

                entity.HasOne(d => d.TaxRegister)
                    .WithMany(p => p.Purchaseinvoices)
                    .HasForeignKey(d => d.TaxRegisterId)
                    .HasConstraintName("FK_PurchaseInvoice_TaxRegister_TaxRegisterId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.PurchaseinvoiceUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_PurchaseInvoice_User_UpdatedByUserId");

                entity.HasOne(d => d.VoucherStyle)
                    .WithMany(p => p.Purchaseinvoices)
                    .HasForeignKey(d => d.VoucherStyleId)
                    .HasConstraintName("FK_PurchaseInvoice_VoucherStyle_VoucherStyleId");
            });

            modelBuilder.Entity<Purchaseinvoicedetail>(entity =>
            {
                entity.HasKey(e => e.PurchaseInvoiceDetId)
                    .HasName("PRIMARY");

                entity.ToTable("purchaseinvoicedetail");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_PurchaseInvoiceDetails_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.PurchaseInvoiceId)
                    .HasName("IX_PurchaseInvoiceDetails_PurchaseInvoiceId");

                entity.HasIndex(e => e.UnitOfMeasurementId)
                    .HasName("IX_PurchaseInvoiceDetails_UnitOfMeasurementId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_PurchaseInvoiceDetails_User_UpdatedByUserId_idx");

                entity.Property(e => e.Description)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.GrossAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.GrossAmountFc)
                    .HasColumnName("GrossAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmountFc)
                    .HasColumnName("NetAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18,2)");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(18,4)");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.PurchaseinvoicedetailPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_PurchaseInvoiceDetails_User_PreparedByUserId");

                entity.HasOne(d => d.PurchaseInvoice)
                    .WithMany(p => p.Purchaseinvoicedetails)
                    .HasForeignKey(d => d.PurchaseInvoiceId)
                    .HasConstraintName("FK_PurchaseInvoiceDetails_PurchaseInvoice_PurchaseInvoiceId");

                entity.HasOne(d => d.UnitOfMeasurement)
                    .WithMany(p => p.Purchaseinvoicedetails)
                    .HasForeignKey(d => d.UnitOfMeasurementId)
                    .HasConstraintName("FK_PurchaseInvoiceDetails_UnitOfMeasurement_UnitOfMeasurementId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.PurchaseinvoicedetailUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_PurchaseInvoiceDetails_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Purchaseinvoicedetailtax>(entity =>
            {
                entity.HasKey(e => e.PurchaseInvoiceDetTaxId)
                    .HasName("PRIMARY");

                entity.ToTable("purchaseinvoicedetailtax");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_PurchaseInvoiceDetailTax_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.PurchaseInvoiceDetId)
                    .HasName("IX_PurchaseInvoiceDetailTax_PurchaseInvoiceDetId");

                entity.HasIndex(e => e.TaxLedgerId)
                    .HasName("IX_PurchaseInvoiceDetailTax_TaxLedgerId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_PurchaseInvoiceDetailTax_User_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAddOrDeduct)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPerOrAmountFc)
                    .HasColumnName("TaxPerOrAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPercentageOrAmount)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.PurchaseinvoicedetailtaxPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_PurchaseInvoiceDetailTax_User_PreparedByUserId");

                entity.HasOne(d => d.PurchaseInvoiceDet)
                    .WithMany(p => p.Purchaseinvoicedetailtaxes)
                    .HasForeignKey(d => d.PurchaseInvoiceDetId)
                    .HasConstraintName("FK_PIDetailTax_InvoiceDetail_PurchaseInvoiceDetId");

                entity.HasOne(d => d.TaxLedger)
                    .WithMany(p => p.Purchaseinvoicedetailtaxes)
                    .HasForeignKey(d => d.TaxLedgerId)
                    .HasConstraintName("FK_PurchaseInvoiceDetailTax_Ledger_TaxLedgerId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.PurchaseinvoicedetailtaxUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_PurchaseInvoiceDetailTax_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Purchaseinvoicetax>(entity =>
            {
                entity.ToTable("purchaseinvoicetax");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_PurchaseInvoiceTax_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.PurchaseInvoiceId)
                    .HasName("IX_PurchaseInvoiceTax_PurchaseInvoiceId");

                entity.HasIndex(e => e.TaxLedgerId)
                    .HasName("IX_PurchaseInvoiceTax_TaxLedgerId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_PurchaseInvoiceTax_User_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAddOrDeduct)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPerOrAmountFc)
                    .HasColumnName("TaxPerOrAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPercentageOrAmount)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.PurchaseinvoicetaxPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_PurchaseInvoiceTax_User_PreparedByUserId");

                entity.HasOne(d => d.PurchaseInvoice)
                    .WithMany(p => p.Purchaseinvoicetaxes)
                    .HasForeignKey(d => d.PurchaseInvoiceId)
                    .HasConstraintName("FK_PurchaseInvoiceTax_PurchaseInvoice_PurchaseInvoiceId");

                entity.HasOne(d => d.TaxLedger)
                    .WithMany(p => p.Purchaseinvoicetaxes)
                    .HasForeignKey(d => d.TaxLedgerId)
                    .HasConstraintName("FK_PurchaseInvoiceTax_Ledger_TaxLedgerId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.PurchaseinvoicetaxUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_PurchaseInvoiceTax_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Receiptvoucher>(entity =>
            {
                entity.ToTable("receiptvoucher");

                entity.HasIndex(e => e.AccountLedgerId)
                    .HasName("IX_ReceiptVoucher_AccountLedgerId");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_ReceiptVoucher_CompanyId");

                entity.HasIndex(e => e.CurrencyId)
                    .HasName("IX_ReceiptVoucher_CurrencyId");

                entity.HasIndex(e => e.FinancialYearId)
                    .HasName("IX_ReceiptVoucher_FinancialYearId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("IX_ReceiptVoucher_PreparedByUserId");

                entity.HasIndex(e => e.StatusId)
                    .HasName("IX_ReceiptVoucher_StatusId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("IX_ReceiptVoucher_UpdatedByUserId");

                entity.HasIndex(e => e.VoucherNo)
                    .HasName("DocumentNo_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.VoucherStyleId)
                    .HasName("tf");

                entity.Property(e => e.Amount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.AmountFc)
                    .HasColumnName("Amount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.AmountFcinWord)
                    .HasColumnName("Amount_FCInWord")
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ChequeAmountFc)
                    .HasColumnName("ChequeAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.ChequeDate).HasColumnType("datetime");

                entity.Property(e => e.ChequeNo)
                    .HasColumnType("varchar(50)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18,6)");

                entity.Property(e => e.Narration)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.TypeCorB)
                    .HasColumnType("varchar(1)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.VoucherDate).HasColumnType("datetime");

                entity.Property(e => e.VoucherNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.HasOne(d => d.AccountLedger)
                    .WithMany(p => p.Receiptvouchers)
                    .HasForeignKey(d => d.AccountLedgerId)
                    .HasConstraintName("FK_ReceiptVoucher_Ledger_AccountLedgerId");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Receiptvouchers)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_ReceiptVoucher_Company_CompanyId");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Receiptvouchers)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReceiptVoucher_Currency_CurrencyId");

                entity.HasOne(d => d.FinancialYear)
                    .WithMany(p => p.Receiptvouchers)
                    .HasForeignKey(d => d.FinancialYearId)
                    .HasConstraintName("FK_ReceiptVoucher_FinancialYear_FinancialYearId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.ReceiptvoucherPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_ReceiptVoucher_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Receiptvouchers)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_ReceiptVoucher_Status_StatusId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.ReceiptvoucherUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_ReceiptVoucher_aspnetusers_UpdatedByUserId");

                entity.HasOne(d => d.VoucherStyle)
                    .WithMany(p => p.Receiptvouchers)
                    .HasForeignKey(d => d.VoucherStyleId)
                    .HasConstraintName("FK_ReceiptVoucher_VoucherStyle_VoucherStyleId");
            });

            modelBuilder.Entity<Receiptvoucherdetail>(entity =>
            {
                entity.HasKey(e => e.ReceiptVoucherDetId)
                    .HasName("PRIMARY");

                entity.ToTable("receiptvoucherdetail");

                entity.HasComment("FK_ReceiptVoucherDetails_Ledger_ParticularLedgerId");

                entity.HasIndex(e => e.CreditNoteId)
                    .HasName("IX_ReceiptVoucherDetails_CreditNoteId");

                entity.HasIndex(e => e.DebitNoteId)
                    .HasName("IX_ReceiptVoucherDetails_DebitNoteId");

                entity.HasIndex(e => e.ParticularLedgerId)
                    .HasName("IX_ReceiptVoucherDetails_ParticularLedgerId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("IX_ReceiptVoucherDetails_PreparedByUserId");

                entity.HasIndex(e => e.ReceiptVoucherId)
                    .HasName("IX_ReceiptVoucherDetails_ReceiptVoucherId");

                entity.HasIndex(e => e.SalesInvoiceId)
                    .HasName("IX_ReceiptVoucherDetails_SalesInvoiceId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("IX_ReceiptVoucherDetails_UpdatedByUserId");

                entity.Property(e => e.Amount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.AmountFc)
                    .HasColumnName("Amount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.Narration)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreditNote)
                    .WithMany(p => p.Receiptvoucherdetails)
                    .HasForeignKey(d => d.CreditNoteId)
                    .HasConstraintName("FK_ReceiptVoucherDetails_CreditNote_CreditNoteId");

                entity.HasOne(d => d.DebitNote)
                    .WithMany(p => p.Receiptvoucherdetails)
                    .HasForeignKey(d => d.DebitNoteId)
                    .HasConstraintName("FK_ReceiptVoucherDetails_DebitNote_DebitNoteId");

                entity.HasOne(d => d.ParticularLedger)
                    .WithMany(p => p.Receiptvoucherdetails)
                    .HasForeignKey(d => d.ParticularLedgerId)
                    .HasConstraintName("FK_ReceiptVoucherDetails_Ledger_ParticularLedgerId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.ReceiptvoucherdetailPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_ReceiptVoucherDetails_aspnetusers_PreparedByUserId");

                entity.HasOne(d => d.ReceiptVoucher)
                    .WithMany(p => p.Receiptvoucherdetails)
                    .HasForeignKey(d => d.ReceiptVoucherId)
                    .HasConstraintName("FK_ReceiptVoucherDetails_ReceiptVoucher_ReceiptVoucherId");

                entity.HasOne(d => d.SalesInvoice)
                    .WithMany(p => p.Receiptvoucherdetails)
                    .HasForeignKey(d => d.SalesInvoiceId)
                    .HasConstraintName("FK_ReceiptVoucherDetails_SalesInvoice_SalesInvoiceId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.ReceiptvoucherdetailUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_ReceiptVoucherDetails_aspnetusers_UpdatedByUserId");
            });

            modelBuilder.Entity<Salesinvoice>(entity =>
            {
                entity.ToTable("salesinvoice");

                entity.HasIndex(e => e.AccountLedgerId)
                    .HasName("IX_SalesInvoice_AccountLedgerId");

                entity.HasIndex(e => e.BankLedgerId)
                    .HasName("IX_SalesInvoice_BankLedgerId");

                entity.HasIndex(e => e.BillToAddressId)
                    .HasName("FK_SalesInvoice_Ledger_BillToAddressId_idx");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_SalesInvoice_CompanyId");

                entity.HasIndex(e => e.CurrencyId)
                    .HasName("IX_SalesInvoice_CurrencyId");

                entity.HasIndex(e => e.CustomerLedgerId)
                    .HasName("IX_SalesInvoice_CustomerLedgerId");

                entity.HasIndex(e => e.FinancialYearId)
                    .HasName("IX_SalesInvoice_FinancialYearId");

                entity.HasIndex(e => e.InvoiceNo)
                    .HasName("DocumentNo_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_SalesInvoice_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.StatusId)
                    .HasName("IX_SalesInvoice_StatusId");

                entity.HasIndex(e => e.TaxRegisterId)
                    .HasName("IX_SalesInvoice_TaxRegisterId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_SalesInvoice_User_UpdatedByUserId_idx");

                entity.HasIndex(e => e.VoucherStyleId)
                    .HasName("IX_SalesInvoice_VoucherStyle_VoucherStyleId_idx");

                entity.Property(e => e.CustomerReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerReferenceNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.DiscountAmountFc)
                    .HasColumnName("DiscountAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18,4)");

                entity.Property(e => e.DiscountPercentageOrAmount)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18,6)");

                entity.Property(e => e.GrossAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.GrossAmountFc)
                    .HasColumnName("GrossAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.NetAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmountFc)
                    .HasColumnName("NetAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmountFcinWord)
                    .HasColumnName("NetAmount_FCInWord")
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PaymentTerm)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxModelType)
                    .HasColumnType("varchar(50)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TotalLineItemAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TotalLineItemAmountFc)
                    .HasColumnName("TotalLineItemAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.AccountLedger)
                    .WithMany(p => p.SalesinvoiceAccountLedgers)
                    .HasForeignKey(d => d.AccountLedgerId)
                    .HasConstraintName("FK_SalesInvoice_Ledger_AccountLedgerId");

                entity.HasOne(d => d.BankLedger)
                    .WithMany(p => p.SalesinvoiceBankLedgers)
                    .HasForeignKey(d => d.BankLedgerId)
                    .HasConstraintName("FK_SalesInvoice_Ledger_BankLedgerId");

                entity.HasOne(d => d.BillToAddress)
                    .WithMany(p => p.Salesinvoices)
                    .HasForeignKey(d => d.BillToAddressId)
                    .HasConstraintName("FK_SalesInvoice_Ledger_BillToAddressId");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Salesinvoices)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_SalesInvoice_Company_CompanyId");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Salesinvoices)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_SalesInvoice_Currency_CurrencyId");

                entity.HasOne(d => d.CustomerLedger)
                    .WithMany(p => p.SalesinvoiceCustomerLedgers)
                    .HasForeignKey(d => d.CustomerLedgerId)
                    .HasConstraintName("FK_SalesInvoice_Ledger_CustomerLedgerId");

                entity.HasOne(d => d.FinancialYear)
                    .WithMany(p => p.Salesinvoices)
                    .HasForeignKey(d => d.FinancialYearId)
                    .HasConstraintName("FK_SalesInvoice_FinancialYear_FinancialYearId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.SalesinvoicePreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_SalesInvoice_User_PreparedByUserId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Salesinvoices)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_SalesInvoice_Status_StatusId");

                entity.HasOne(d => d.TaxRegister)
                    .WithMany(p => p.Salesinvoices)
                    .HasForeignKey(d => d.TaxRegisterId)
                    .HasConstraintName("FK_SalesInvoice_TaxRegister_TaxRegisterId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.SalesinvoiceUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_SalesInvoice_User_UpdatedByUserId");

                entity.HasOne(d => d.VoucherStyle)
                    .WithMany(p => p.Salesinvoices)
                    .HasForeignKey(d => d.VoucherStyleId)
                    .HasConstraintName("FK_SalesInvoice_VoucherStyle_VoucherStyleId");
            });

            modelBuilder.Entity<Salesinvoicedetail>(entity =>
            {
                entity.HasKey(e => e.SalesInvoiceDetId)
                    .HasName("PRIMARY");

                entity.ToTable("salesinvoicedetail");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_SalesInvoiceDetails_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.SalesInvoiceId)
                    .HasName("IX_SalesInvoiceDetails_SalesInvoiceId");

                entity.HasIndex(e => e.UnitOfMeasurementId)
                    .HasName("IX_SalesInvoiceDetails_UnitOfMeasurementId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_SalesInvoiceDetails_User_UpdatedByUserId_idx");

                entity.Property(e => e.Description)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.GrossAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.GrossAmountFc)
                    .HasColumnName("GrossAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.NetAmountFc)
                    .HasColumnName("NetAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18,2)");

                entity.Property(e => e.TaxAmount)
                    .HasColumnType("decimal(18,4)")
                    .HasDefaultValueSql("'0.0000'");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)")
                    .HasDefaultValueSql("'0.0000'");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(18,4)");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.SalesinvoicedetailPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_SalesInvoiceDetails_User_PreparedByUserId");

                entity.HasOne(d => d.SalesInvoice)
                    .WithMany(p => p.Salesinvoicedetails)
                    .HasForeignKey(d => d.SalesInvoiceId)
                    .HasConstraintName("FK_SalesInvoiceDetails_SalesInvoice_SalesInvoiceId");

                entity.HasOne(d => d.UnitOfMeasurement)
                    .WithMany(p => p.Salesinvoicedetails)
                    .HasForeignKey(d => d.UnitOfMeasurementId)
                    .HasConstraintName("FK_SalesInvoiceDetails_UnitOfMeasurement_UnitOfMeasurementId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.SalesinvoicedetailUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_SalesInvoiceDetails_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Salesinvoicedetailtax>(entity =>
            {
                entity.HasKey(e => e.SalesInvoiceDetTaxId)
                    .HasName("PRIMARY");

                entity.ToTable("salesinvoicedetailtax");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_SalesInvoiceDetailsTax_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.SalesInvoiceDetId)
                    .HasName("IX_SalesInvoiceDetailsTax_SalesInvoiceDetId");

                entity.HasIndex(e => e.TaxLedgerId)
                    .HasName("IX_SalesInvoiceDetailsTax_TaxLedgerId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_SalesInvoiceDetailsTax_User_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAddOrDeduct)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPerOrAmountFc)
                    .HasColumnName("TaxPerOrAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPercentageOrAmount)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.SalesinvoicedetailtaxPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_SalesInvoiceDetailsTax_User_PreparedByUserId");

                entity.HasOne(d => d.SalesInvoiceDet)
                    .WithMany(p => p.Salesinvoicedetailtaxes)
                    .HasForeignKey(d => d.SalesInvoiceDetId)
                    .HasConstraintName("FK_SalesInvoiceDetailsTax_SalesInvoiceDetails_SalesInvoiceDetId");

                entity.HasOne(d => d.TaxLedger)
                    .WithMany(p => p.Salesinvoicedetailtaxes)
                    .HasForeignKey(d => d.TaxLedgerId)
                    .HasConstraintName("FK_SalesInvoiceDetailsTax_Ledger_TaxLedgerId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.SalesinvoicedetailtaxUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_SalesInvoiceDetailsTax_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Salesinvoicetax>(entity =>
            {
                entity.ToTable("salesinvoicetax");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_SalesInvoiceTax_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.SalesInvoiceId)
                    .HasName("IX_SalesInvoiceTax_SalesInvoiceId");

                entity.HasIndex(e => e.TaxLedgerId)
                    .HasName("IX_SalesInvoiceTax_TaxLedgerId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_SalesInvoiceTax_User_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasColumnType("varchar(2000)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAddOrDeduct)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPerOrAmountFc)
                    .HasColumnName("TaxPerOrAmount_FC")
                    .HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxPercentageOrAmount)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.SalesinvoicetaxPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_SalesInvoiceTax_User_PreparedByUserId");

                entity.HasOne(d => d.SalesInvoice)
                    .WithMany(p => p.Salesinvoicetaxes)
                    .HasForeignKey(d => d.SalesInvoiceId)
                    .HasConstraintName("FK_SalesInvoiceTax_SalesInvoice_SalesInvoiceId");

                entity.HasOne(d => d.TaxLedger)
                    .WithMany(p => p.Salesinvoicetaxes)
                    .HasForeignKey(d => d.TaxLedgerId)
                    .HasConstraintName("FK_SalesInvoiceTax_Ledger_TaxLedgerId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.SalesinvoicetaxUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_SalesInvoiceTax_User_UpdatedByUserId");
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.ToTable("state");

                entity.HasIndex(e => e.CountryId)
                    .HasName("IX_State_CountryId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_State_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_State_User_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.StateName)
                    .HasColumnType("varchar(500)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.States)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_State_Country_CountryId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.StatePreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_State_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.StateUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_State_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Status>(entity =>
            {
                entity.ToTable("status");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_Status_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.StatusName)
                    .HasName("Description_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_Status_User_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.StatusName)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.StatusPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_Status_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.StatusUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_Status_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Taxregister>(entity =>
            {
                entity.ToTable("taxregister");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_TaxRegister_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.TaxRegisterName)
                    .HasName("Name_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_TaxRegister_User_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.TaxRegisterName)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.TaxregisterPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_TaxRegister_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.TaxregisterUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_TaxRegister_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Taxregisterdetail>(entity =>
            {
                entity.HasKey(e => e.TaxRegisterDetId)
                    .HasName("PRIMARY");

                entity.ToTable("taxregisterdetail");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_TaxRegisterDetails_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.TaxLedgerId)
                    .HasName("IX_TaxRegisterDetails_TaxLedgerId");

                entity.HasIndex(e => e.TaxRegisterId)
                    .HasName("IX_TaxRegisterDetails_TaxRegisterId");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_TaxRegisterDetails_User_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Rate).HasColumnType("decimal(18,4)");

                entity.Property(e => e.TaxAddOrDeduct)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.TaxPercentageOrAmount)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.TaxregisterdetailPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_TaxRegisterDetails_User_PreparedByUserId");

                entity.HasOne(d => d.TaxLedger)
                    .WithMany(p => p.Taxregisterdetails)
                    .HasForeignKey(d => d.TaxLedgerId)
                    .HasConstraintName("FK_TaxRegisterDetails_Ledger_TaxLedgerId");

                entity.HasOne(d => d.TaxRegister)
                    .WithMany(p => p.Taxregisterdetails)
                    .HasForeignKey(d => d.TaxRegisterId)
                    .HasConstraintName("FK_TaxRegisterDetails_TaxRegister_TaxRegisterId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.TaxregisterdetailUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_TaxRegisterDetails_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Unitofmeasurement>(entity =>
            {
                entity.ToTable("unitofmeasurement");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_UnitOfMeasurement_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UnitOfMeasurementName)
                    .HasName("Name_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_UnitOfMeasurement_User_UpdatedByUserId_idx");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UnitOfMeasurementName)
                    .HasColumnType("varchar(250)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.UnitofmeasurementPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_UnitOfMeasurement_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.UnitofmeasurementUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_UnitOfMeasurement_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Vouchersetup>(entity =>
            {
                entity.ToTable("vouchersetup");

                entity.HasIndex(e => e.ModuleId)
                    .HasName("IX_VoucherSetup_Module_ModuleId_idx");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_VoucherSetup_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_VoucherSetup_User_UpdatedByUserId_idx");

                entity.HasIndex(e => e.VoucherSetupName)
                    .HasName("Name_UNIQUE")
                    .IsUnique();

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.VoucherSetupName)
                    .IsRequired()
                    .HasColumnType("varchar(500)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.Vouchersetups)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_VoucherSetup_Module_ModuleId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.VouchersetupPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_VoucherSetup_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.VouchersetupUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_VoucherSetup_User_UpdatedByUserId");
            });

            modelBuilder.Entity<Vouchersetupdetail>(entity =>
            {
                entity.HasKey(e => e.VoucherSetupDetId)
                    .HasName("PRIMARY");

                entity.ToTable("vouchersetupdetail");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_VoucherSetupDetails_Company_CompanyId");

                entity.HasIndex(e => e.FinancialYearId)
                    .HasName("IX_VoucherSetupDetails_FinancialYear_FinancialYearId");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_VoucherSetupDetails_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_VoucherSetupDetails_User_UpdatedByUserId_idx");

                entity.HasIndex(e => e.VoucherSetupId)
                    .HasName("IX_VoucherSetupDetails_VoucherSetup_VoucherSetupId");

                entity.HasIndex(e => e.VoucherStyleId)
                    .HasName("IX_VoucherSetupDetails_VoucherStyle_VoucherStyleId");

                entity.Property(e => e.FormatText)
                    .HasColumnType("varchar(100)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.NoPad)
                    .HasColumnType("char(1)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.NoPostString)
                    .HasColumnType("varchar(100)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.NoPreString)
                    .HasColumnType("varchar(100)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.NoSeparator)
                    .HasColumnType("varchar(100)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Vouchersetupdetails)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_VoucherSetupDetails_Company_CompanyId");

                entity.HasOne(d => d.FinancialYear)
                    .WithMany(p => p.Vouchersetupdetails)
                    .HasForeignKey(d => d.FinancialYearId)
                    .HasConstraintName("FK_VoucherSetupDetails_FinancialYear_FinancialYearId");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.VouchersetupdetailPreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_VoucherSetupDetails_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.VouchersetupdetailUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_VoucherSetupDetails_User_UpdatedByUserId");

                entity.HasOne(d => d.VoucherSetup)
                    .WithMany(p => p.Vouchersetupdetails)
                    .HasForeignKey(d => d.VoucherSetupId)
                    .HasConstraintName("FK_VoucherSetupDetails_VoucherSetup_VoucherSetupId");

                entity.HasOne(d => d.VoucherStyle)
                    .WithMany(p => p.Vouchersetupdetails)
                    .HasForeignKey(d => d.VoucherStyleId)
                    .HasConstraintName("FK_VoucherSetupDetails_VoucherStyle_VoucherStyleId");
            });

            modelBuilder.Entity<Voucherstyle>(entity =>
            {
                entity.ToTable("voucherstyle");

                entity.HasIndex(e => e.PreparedByUserId)
                    .HasName("FK_VoucherStyle_User_PreparedByUserId_idx");

                entity.HasIndex(e => e.UpdatedByUserId)
                    .HasName("FK_VoucherStyle_User_UpdatedByUserId_idx");

                entity.HasIndex(e => e.VoucherStyleName)
                    .HasName("Name_UNIQUE")
                    .IsUnique();

                entity.Property(e => e.PreparedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.VoucherStyleName)
                    .HasColumnType("varchar(500)")
                    .HasCharSet("utf8mb4")
                    .HasCollation("utf8mb4_0900_ai_ci");

                entity.HasOne(d => d.PreparedByUser)
                    .WithMany(p => p.VoucherstylePreparedByUsers)
                    .HasForeignKey(d => d.PreparedByUserId)
                    .HasConstraintName("FK_VoucherStyle_User_PreparedByUserId");

                entity.HasOne(d => d.UpdatedByUser)
                    .WithMany(p => p.VoucherstyleUpdatedByUsers)
                    .HasForeignKey(d => d.UpdatedByUserId)
                    .HasConstraintName("FK_VoucherStyle_User_UpdatedByUserId");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}